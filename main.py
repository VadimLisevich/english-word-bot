import os
import json
import logging
import random
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from openai import OpenAI

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai = OpenAI(api_key=OPENAI_API_KEY)

# –§–∞–π–ª—ã
SETTINGS_FILE = "user_settings.json"
WORDS_FILE = "user_words.json"
PHRASES_FILE = "phrases.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

# –¢–µ–º–∞—Ç–∏–∫–∏
CATEGORIES = {
    "–∞—Ñ–æ—Ä–∏–∑–º": "–ê—Ñ–æ—Ä–∏–∑–º",
    "—Ü–∏—Ç–∞—Ç–∞": "–¶–∏—Ç–∞—Ç–∞",
    "–∫–∏–Ω–æ": "–ö–∏–Ω–æ",
    "–ü–µ—Å–Ω–∏": "–ü–µ—Å–Ω–∏",
    "–ª—é–±–∞—è —Ç–µ–º–∞": "–õ—é–±–∞—è —Ç–µ–º–∞"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_json(filename):
    if not os.path.exists(filename):
        return {}
    with open(filename, "r") as f:
        return json.load(f)


def save_json(filename, data):
    with open(filename, "w") as f:
        json.dump(data, f, indent=2)


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    context.user_data["settings_step"] = 0
    settings = load_json(SETTINGS_FILE)
    settings[user_id] = {}
    save_json(SETTINGS_FILE, settings)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ —Ñ—Ä–∞–∑—ã. "
        "–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å, "
        "–∞ —è –±—É–¥—É —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –¥–∞–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–∏—Ö —Å–ª–æ–≤.\n\n"
        "–û–∫–µ–π, –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞!"
    )
    await ask_translate_words(update)


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    context.user_data["settings_step"] = 0
    settings = load_json(SETTINGS_FILE)
    settings[user_id] = {}
    save_json(SETTINGS_FILE, settings)
    await ask_translate_words(update)


# –®–∞–≥ 1
async def ask_translate_words(update: Update):
    keyboard = [
        [InlineKeyboardButton("–ë–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞", callback_data="translate_words_no")],
        [InlineKeyboardButton("–ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥", callback_data="translate_words_yes")],
    ]
    await update.message.reply_text("–ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –µ–≥–æ –≤ –±–∞–∑—É?",
                                    reply_markup=InlineKeyboardMarkup(keyboard))


# –®–∞–≥ 2‚Äì6
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)

    settings = load_json(SETTINGS_FILE)

    data = query.data

    if data.startswith("translate_words_"):
        settings[user_id]["translate_words"] = data.endswith("yes")
        await query.message.reply_text("–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø–∏—Å–∞–ª —Ç–µ–±–µ?",
                                       reply_markup=InlineKeyboardMarkup([
                                           [InlineKeyboardButton("1", callback_data="frequency_1")],
                                           [InlineKeyboardButton("2", callback_data="frequency_2")],
                                           [InlineKeyboardButton("3", callback_data="frequency_3")]
                                       ]))

    elif data.startswith("frequency_"):
        settings[user_id]["frequency"] = int(data.split("_")[1])
        await query.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ê —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å?",
                                       reply_markup=InlineKeyboardMarkup([
                                           [InlineKeyboardButton("1", callback_data="count_1")],
                                           [InlineKeyboardButton("2", callback_data="count_2")],
                                           [InlineKeyboardButton("3", callback_data="count_3")],
                                           [InlineKeyboardButton("5", callback_data="count_5")]
                                       ]))

    elif data.startswith("count_"):
        settings[user_id]["count"] = int(data.split("_")[1])
        await query.message.reply_text("–û–∫–µ–π, –∞ –æ—Ç–∫—É–¥–∞ –ª—É—á—à–µ –±—Ä–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑?",
                                       reply_markup=InlineKeyboardMarkup([
                                           [InlineKeyboardButton("–ê—Ñ–æ—Ä–∏–∑–º", callback_data="source_–∞—Ñ–æ—Ä–∏–∑–º")],
                                           [InlineKeyboardButton("–¶–∏—Ç–∞—Ç–∞", callback_data="source_—Ü–∏—Ç–∞—Ç–∞")],
                                           [InlineKeyboardButton("–ö–∏–Ω–æ", callback_data="source_–∫–∏–Ω–æ")],
                                           [InlineKeyboardButton("–ü–µ—Å–Ω–∏", callback_data="source_–ü–µ—Å–Ω–∏")],
                                           [InlineKeyboardButton("–õ—é–±–∞—è —Ç–µ–º–∞", callback_data="source_–ª—é–±–∞—è —Ç–µ–º–∞")]
                                       ]))

    elif data.startswith("source_"):
        settings[user_id]["source"] = data.split("_")[1]
        await query.message.reply_text("–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ñ—Ä–∞–∑ –Ω—É–∂–µ–Ω?",
                                       reply_markup=InlineKeyboardMarkup([
                                           [InlineKeyboardButton("–î–∞", callback_data="translate_phrase_yes")],
                                           [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_phrase_no")]
                                       ]))

    elif data.startswith("translate_phrase_"):
        settings[user_id]["translate_phrase"] = data.endswith("yes")
        save_json(SETTINGS_FILE, settings)
        await query.message.reply_text(
            "üéâ –£—Ä–∞, –º—ã –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏!\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /menu"
        )

    save_json(SETTINGS_FILE, settings)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    settings = load_json(SETTINGS_FILE)
    words = load_json(WORDS_FILE)

    if user_id not in settings or "translate_words" not in settings[user_id]:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start –∏–ª–∏ /menu –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üòä")
        return

    text = update.message.text.strip().lower()

    if text.startswith("/delete "):
        word_to_delete = text[8:].strip().lower()
        if user_id in words and word_to_delete in words[user_id]:
            words[user_id].remove(word_to_delete)
            save_json(WORDS_FILE, words)
            await update.message.reply_text(f"–°–ª–æ–≤–æ '{word_to_delete}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã üóëÔ∏è")
        else:
            await update.message.reply_text(f"–°–ª–æ–≤–æ '{word_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
        return

    words.setdefault(user_id, [])
    if text not in words[user_id]:
        words[user_id].append(text)
        save_json(WORDS_FILE, words)

        if settings[user_id].get("translate_words"):
            try:
                translation = get_translation(text)
                await update.message.reply_text(f"–°–ª–æ–≤–æ '{text}' (–ø–µ—Ä–µ–≤–æ–¥: {translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ")
            except Exception:
                await update.message.reply_text(f"–°–ª–æ–≤–æ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ (–ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω)")
        else:
            await update.message.reply_text(f"–°–ª–æ–≤–æ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ")
    else:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{text}' —É–∂–µ –≤ –±–∞–∑–µ üëå")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
def get_translation(word):
    response = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{
            "role": "user",
            "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ '{word}' –Ω–∞ —Ä—É—Å—Å–∫–∏–π –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
        }],
        temperature=0.5,
    )
    return response.choices[0].message.content.strip()


# –§—Ä–∞–∑—ã
def load_phrases_by_category(category):
    phrases = load_json(PHRASES_FILE)
    if category == "–ª—é–±–∞—è —Ç–µ–º–∞":
        all_phrases = []
        for cat_phrases in phrases.values():
            all_phrases.extend(cat_phrases)
        return all_phrases
    return phrases.get(category, [])


# –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞
async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    settings = load_json(SETTINGS_FILE)
    words = load_json(WORDS_FILE)

    for user_id, config in settings.items():
        user_words = words.get(user_id, [])
        if not user_words:
            continue

        count = config.get("count", 1)
        selected_words = random.sample(user_words, min(count, len(user_words)))
        source = config.get("source", "–ª—é–±–∞—è —Ç–µ–º–∞")
        phrases = load_phrases_by_category(source)
        random.shuffle(phrases)

        for word in selected_words:
            phrase_obj = next((p for p in phrases if word.lower() in p["text"].lower()), None)
            if phrase_obj:
                reply = f"üìò –ü—Ä–∏–º–µ—Ä:\n\"{phrase_obj['text']}\" Source: {CATEGORIES.get(source, '–§—Ä–∞–∑–∞')}.\n"
                if config.get("translate_phrase") and "translation" in phrase_obj:
                    reply += f"\n\"{phrase_obj['translation']}\" –ò—Å—Ç–æ—á–Ω–∏–∫: {CATEGORIES.get(source, '–§—Ä–∞–∑–∞')}."
                try:
                    await context.bot.send_message(chat_id=int(user_id), text=reply)
                except Exception as e:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, "interval", hours=8)
    scheduler.start()

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
