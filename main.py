import os
import logging
import json
import random
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import openai

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)

SETTINGS_FILE = "data/settings.json"
WORDS_FILE = "data/words.json"

CATEGORIES = {
    "–∞—Ñ–æ—Ä–∏–∑–º—ã": "Aphorism",
    "—Ü–∏—Ç–∞—Ç—ã": "Quote",
    "–∫–∏–Ω–æ": "Movie",
    "–ø–µ—Å–Ω–∏": "Song",
    "–ª—é–±–∞—è —Ç–µ–º–∞": "Phrase",
}

scheduler = AsyncIOScheduler()


def load_json(path):
    if not os.path.exists(path):
        return {}
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)


def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    settings = load_json(SETTINGS_FILE)

    context.user_data["config"] = {}

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞.\n"
        "–¢—ã –ø—Ä–∏—Å—ã–ª–∞–µ—à—å –º–Ω–µ —Å–ª–æ–≤–æ ‚Äî —è –¥–æ–±–∞–≤–ª—è—é –µ–≥–æ –≤ –±–∞–∑—É –∏ –ø–æ–¥–±–∏—Ä–∞—é —Ñ—Ä–∞–∑—ã —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º.\n"
        "–ù–∞—á–Ω—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É ‚¨áÔ∏è"
    )

    await ask_translate_word(update, context)


async def ask_translate_word(update, context):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_word_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_word_no")],
    ]
    await update.message.reply_text("üî§ –ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?", reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = str(query.from_user.id)

    config = context.user_data.get("config", {})

    def send_question(text, buttons):
        return query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(b, callback_data=b)] for b in buttons]))

    if data.startswith("translate_word"):
        config["translate_word"] = data.endswith("yes")
        return await send_question("üì® –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ—Ä–∞–∑—ã?", ["1", "2", "3"])

    if data in ["1", "2", "3"]:
        config["frequency"] = int(data)
        return await send_question("üì¶ –°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞ —Ä–∞–∑?", ["1", "2", "3", "5"])

    if data in ["1", "2", "3", "5"]:
        config["count"] = int(data)
        return await send_question("üé≠ –û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?", list(CATEGORIES.keys()))

    if data.lower() in CATEGORIES:
        config["source"] = data.lower()
        return await send_question("üí¨ –ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?", ["–î–∞", "–ù–µ—Ç"])

    if data in ["–î–∞", "–ù–µ—Ç"]:
        config["translate_phrase"] = data == "–î–∞"

        settings = load_json(SETTINGS_FILE)
        settings[user_id] = config
        save_json(SETTINGS_FILE, settings)

        await query.edit_message_text(
            "üéâ –£—Ä–∞, –º—ã –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏!\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /menu"
        )
        return


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîß –ù–∞—Å—Ç—Ä–æ–∏–º –∑–∞–Ω–æ–≤–æ:")
    await ask_translate_word(update, context)


async def handle_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    word = update.message.text.strip().lower()
    user_id = str(update.effective_user.id)

    settings = load_json(SETTINGS_FILE)
    if user_id not in settings:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start –∏–ª–∏ /menu –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üòä")
        return

    words = load_json(WORDS_FILE)
    user_words = words.get(user_id, [])
    if word in user_words:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ ‚ùóÔ∏è")
        return

    user_words.append(word)
    words[user_id] = user_words
    save_json(WORDS_FILE, words)

    translation = ""
    if settings[user_id].get("translate_word"):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": f"Translate the word '{word}' to Russian."}],
            )
            translation = response["choices"][0]["message"]["content"]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")

    message = f"–°–ª–æ–≤–æ '{word}'"
    if translation:
        message += f" (–ø–µ—Ä–µ–≤–æ–¥: {translation})"
    message += " ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ"

    await update.message.reply_text(message)


def load_phrases_by_category(category):
    file_map = {
        "–∞—Ñ–æ—Ä–∏–∑–º—ã": "phrases_aphorisms.json",
        "—Ü–∏—Ç–∞—Ç—ã": "phrases_quotes.json",
        "–∫–∏–Ω–æ": "phrases_movies.json",
        "–ø–µ—Å–Ω–∏": "phrases_songs.json",
        "–ª—é–±–∞—è —Ç–µ–º–∞": "phrases_all.json",
    }
    path = f"data/{file_map.get(category, 'phrases_all.json')}"
    if not os.path.exists(path):
        return []
    return load_json(path)


async def send_reminders(bot):
    settings = load_json(SETTINGS_FILE)
    words = load_json(WORDS_FILE)

    for user_id, config in settings.items():
        user_words = words.get(user_id, [])
        if not user_words:
            continue

        count = config.get("count", 1)
        selected_words = random.sample(user_words, min(count, len(user_words)))
        source = config.get("source", "–ª—é–±–∞—è —Ç–µ–º–∞")
        phrases = load_phrases_by_category(source)
        random.shuffle(phrases)

        for word in selected_words:
            phrase_obj = next((p for p in phrases if word.lower() in p["text"].lower()), None)
            if phrase_obj:
                reply = f"üìò –ü—Ä–∏–º–µ—Ä:\n\"{phrase_obj['text']}\" Source: {CATEGORIES.get(source, '–§—Ä–∞–∑–∞')}.\n"
                if config.get("translate_phrase") and "translation" in phrase_obj:
                    reply += f"\n\"{phrase_obj['translation']}\" –ò—Å—Ç–æ—á–Ω–∏–∫: {CATEGORIES.get(source, '–§—Ä–∞–∑–∞')}."
                try:
                    await bot.send_message(chat_id=int(user_id), text=reply)
                except Exception as e:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")


async def delete_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = update.message.text.strip().split()
    if len(parts) != 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /delete —Å–ª–æ–≤–æ")

    word = parts[1].lower()
    user_id = str(update.effective_user.id)

    words = load_json(WORDS_FILE)
    user_words = words.get(user_id, [])
    if word not in user_words:
        return await update.message.reply_text(f"–°–ª–æ–≤–∞ '{word}' –Ω–µ—Ç –≤ –±–∞–∑–µ ‚ùå")

    user_words.remove(word)
    words[user_id] = user_words
    save_json(WORDS_FILE, words)

    await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã üóëÔ∏è")


if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("delete", delete_word))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_word))

    scheduler.add_job(lambda: send_reminders(app.bot), "interval", hours=8)
    scheduler.start()

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
