import logging
import asyncio
import nest_asyncio
import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, CallbackQueryHandler, ContextTypes
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import os
import json
from dotenv import load_dotenv
import random
from pytz import timezone

nest_asyncio.apply()
load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")
TOKEN = os.getenv("BOT_TOKEN")
PORTUGAL_TZ = timezone('Europe/Lisbon')

logging.basicConfig(
    format='%(asctime)s | %(levelname)s | %(message)s',
    level=logging.INFO
)

user_settings = {}
user_words = {}

if os.path.exists("user_data.json"):
    with open("user_data.json", "r") as f:
        data = json.load(f)
        user_settings = data.get("settings", {})
        user_words = data.get("words", {})

def save_user_data():
    with open("user_data.json", "w") as f:
        json.dump({"settings": user_settings, "words": user_words}, f)

async def translate_word(word):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user",
                "content": f"Translate the word '{word}' from English to Russian."
            }]
        )
        return response.choices[0].message["content"].strip()
    except Exception as e:
        logging.error(f"Translation error for '{word}': {e}")
        return "–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

async def generate_example(word, category):
    prompt_map = {
        "–ö–∏–Ω–æ": f"Give a movie quote using the word '{word}'. Name the movie.",
        "–ü–µ—Å–Ω–∏": f"Give a song lyric using the word '{word}'. Name the song.",
        "–ê—Ñ–æ—Ä–∏–∑–º—ã": f"Give an aphorism using the word '{word}'.",
        "–¶–∏—Ç–∞—Ç—ã": f"Give a quote from a famous person using the word '{word}'. Name the person.",
        "–õ—é–±–∞—è —Ç–µ–º–∞": f"Give a sentence in any style using the word '{word}' and mention the source style (movie, book, etc.)."
    }

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user",
                "content": prompt_map.get(category, prompt_map["–õ—é–±–∞—è —Ç–µ–º–∞"])
            }]
        )
        return response.choices[0].message["content"].strip()
    except Exception as e:
        logging.error(f"Error generating example for word '{word}': {e}")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_settings[user_id] = {
        "translate_words": None,
        "frequency": None,
        "words_per_message": None,
        "phrase_source": None,
        "translate_phrases": None
    }
    save_user_data()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞. –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –≤—Å—ë –ø–æ–¥ —Ç–µ–±—è üôÇ"
    )
    await ask_translate_words(update, context)

async def ask_translate_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_words_yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_words_no")]
    ]
    await update.message.reply_text("–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?", reply_markup=InlineKeyboardMarkup(keyboard))

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_settings[user_id] = {
        "translate_words": None,
        "frequency": None,
        "words_per_message": None,
        "phrase_source": None,
        "translate_phrases": None
    }
    save_user_data()
    await ask_translate_words(update, context)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    data = query.data

    if data.startswith("translate_words_"):
        user_settings[user_id]["translate_words"] = data.endswith("yes")
        await query.message.reply_text("–ö–∞–∫ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data="freq_1")],
            [InlineKeyboardButton("2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_2")],
            [InlineKeyboardButton("3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_3")]
        ]))

    elif data.startswith("freq_"):
        user_settings[user_id]["frequency"] = int(data.split("_")[1])
        await query.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑?", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("1", callback_data="count_1"),
             InlineKeyboardButton("2", callback_data="count_2")],
            [InlineKeyboardButton("3", callback_data="count_3"),
             InlineKeyboardButton("5", callback_data="count_5")]
        ]))

    elif data.startswith("count_"):
        user_settings[user_id]["words_per_message"] = int(data.split("_")[1])
        await query.message.reply_text("–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ê—Ñ–æ—Ä–∏–∑–º—ã", callback_data="source_–ê—Ñ–æ—Ä–∏–∑–º—ã")],
            [InlineKeyboardButton("–¶–∏—Ç–∞—Ç—ã", callback_data="source_–¶–∏—Ç–∞—Ç—ã")],
            [InlineKeyboardButton("–ö–∏–Ω–æ", callback_data="source_–ö–∏–Ω–æ")],
            [InlineKeyboardButton("–ü–µ—Å–Ω–∏", callback_data="source_–ü–µ—Å–Ω–∏")],
            [InlineKeyboardButton("–õ—é–±–∞—è —Ç–µ–º–∞", callback_data="source_–õ—é–±–∞—è —Ç–µ–º–∞")]
        ]))

    elif data.startswith("source_"):
        user_settings[user_id]["phrase_source"] = data.split("_", 1)[1]
        await query.message.reply_text("–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞", callback_data="translate_phrases_yes"),
             InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_phrases_no")]
        ]))

    elif data.startswith("translate_phrases_"):
        user_settings[user_id]["translate_phrases"] = data.endswith("yes")
        save_user_data()
        await query.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–∞–±–µ—Ä–∏ /menu")

async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    word = update.message.text.strip().lower()

    if user_id not in user_words:
        user_words[user_id] = []

    if word not in user_words[user_id]:
        user_words[user_id].append(word)
        save_user_data()
        translation = await translate_word(word) if user_settings.get(user_id, {}).get("translate_words") else None
        phrase = await generate_example(word, user_settings.get(user_id, {}).get("phrase_source", "–õ—é–±–∞—è —Ç–µ–º–∞"))
        response = f"–°–ª–æ–≤–æ '{word}'"
        if translation:
            response += f" (–ø–µ—Ä–µ–≤–æ–¥: {translation})"
        response += " ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ"
        await update.message.reply_text(response)
        await update.message.reply_text(f"–ü—Ä–∏–º–µ—Ä: {phrase}")
    else:
        await update.message.reply_text("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ–µ–π –±–∞–∑–µ.")

async def send_reminders():
    for user_id, settings in user_settings.items():
        words = user_words.get(user_id, [])
        if not words or not settings:
            continue
        count = settings.get("words_per_message", 1)
        selected_words = random.sample(words, min(count, len(words)))
        for word in selected_words:
            translation = await translate_word(word) if settings.get("translate_words") else None
            phrase = await generate_example(word, settings.get("phrase_source", "–õ—é–±–∞—è —Ç–µ–º–∞"))
            text = f"–°–ª–æ–≤–æ: {word}"
            if translation:
                text += f" (–ø–µ—Ä–µ–≤–æ–¥: {translation})"
            text += f"\n–ü—Ä–∏–º–µ—Ä: {phrase}"
            # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
            application.bot.send_message(chat_id=int(user_id), text=text)

if __name__ == "__main__":
    scheduler = AsyncIOScheduler(timezone=PORTUGAL_TZ)
    scheduler.add_job(send_reminders, CronTrigger(hour=11, minute=0))
    scheduler.add_job(send_reminders, CronTrigger(hour=15, minute=0))
    scheduler.add_job(send_reminders, CronTrigger(hour=19, minute=0))
    scheduler.start()

    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CallbackQueryHandler(handle_button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_word))

    asyncio.get_event_loop().run_until_complete(application.run_polling())
