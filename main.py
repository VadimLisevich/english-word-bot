import os
import json
import logging
import random
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import openai

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

logging.basicConfig(
    format='%(asctime)s | %(levelname)s | %(message)s',
    level=logging.INFO
)

WORDS_FILE = "user_words.json"
SETTINGS_FILE = "user_settings.json"

scheduler = AsyncIOScheduler()
scheduler.start()

def load_json(path):
    if not os.path.exists(path):
        return {}
    with open(path, "r") as f:
        return json.load(f)

def save_json(path, data):
    with open(path, "w") as f:
        json.dump(data, f, indent=2)

user_words = load_json(WORDS_FILE)
user_settings = load_json(SETTINGS_FILE)

async def send_message(user_id, text, reply_markup=None):
    try:
        await application.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_settings[user_id] = {}
    save_json(SETTINGS_FILE, user_settings)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ —Ñ—Ä–∞–∑—ã. "
            "–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å, "
            "–∞ —è –±—É–¥—É —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –¥–∞–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–∏—Ö —Å–ª–æ–≤.\n\n"
            "–û–∫–µ–π, –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞!"
        )
    )
    await ask_translation_preference(update)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_settings[user_id] = {}
    save_json(SETTINGS_FILE, user_settings)
    await ask_translation_preference(update)

async def ask_translation_preference(update: Update):
    keyboard = [
        [InlineKeyboardButton("–ë–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞", callback_data="translate_no")],
        [InlineKeyboardButton("–ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥", callback_data="translate_yes")]
    ]
    await update.effective_chat.send_message(
        "–ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –µ–≥–æ –≤ –±–∞–∑—É?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ask_frequency(update: Update):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="frequency_1")],
        [InlineKeyboardButton("2", callback_data="frequency_2")],
        [InlineKeyboardButton("3", callback_data="frequency_3")]
    ]
    await update.effective_chat.send_message(
        "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø–∏—Å–∞–ª —Ç–µ–±–µ?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ask_word_count(update: Update):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="wordcount_1")],
        [InlineKeyboardButton("2", callback_data="wordcount_2")],
        [InlineKeyboardButton("3", callback_data="wordcount_3")],
        [InlineKeyboardButton("5", callback_data="wordcount_5")]
    ]
    await update.effective_chat.send_message(
        "–û—Ç–ª–∏—á–Ω–æ! –ê —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ask_source_category(update: Update):
    keyboard = [
        [InlineKeyboardButton("–ê—Ñ–æ—Ä–∏–∑–º", callback_data="source_aphorism")],
        [InlineKeyboardButton("–¶–∏—Ç–∞—Ç–∞", callback_data="source_quote")],
        [InlineKeyboardButton("–ö–∏–Ω–æ", callback_data="source_movie")],
        [InlineKeyboardButton("–ü–µ—Å–Ω–∏", callback_data="source_song")],
        [InlineKeyboardButton("–õ—é–±–∞—è —Ç–µ–º–∞", callback_data="source_any")]
    ]
    await update.effective_chat.send_message(
        "–û–∫–µ–π, –∞ –æ—Ç–∫—É–¥–∞ –ª—É—á—à–µ –±—Ä–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ask_translation_for_phrase(update: Update):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="phrase_translate_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="phrase_translate_no")]
    ]
    await update.effective_chat.send_message(
        "–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ñ—Ä–∞–∑ –Ω—É–∂–µ–Ω?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def finish_settings(update: Update):
    await update.effective_chat.send_message(
        "üéâ –£—Ä–∞, –º—ã –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏!\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /menu"
    )

def update_user_setting(user_id, key, value):
    user_settings[user_id][key] = value
    save_json(SETTINGS_FILE, user_settings)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data
    await query.answer()

    if data.startswith("translate_"):
        update_user_setting(user_id, "word_translation", data.endswith("yes"))
        await ask_frequency(update)
    elif data.startswith("frequency_"):
        update_user_setting(user_id, "frequency", int(data.split("_")[1]))
        await ask_word_count(update)
    elif data.startswith("wordcount_"):
        update_user_setting(user_id, "word_count", int(data.split("_")[1]))
        await ask_source_category(update)
    elif data.startswith("source_"):
        update_user_setting(user_id, "source", data.split("_")[1])
        await ask_translation_for_phrase(update)
    elif data.startswith("phrase_translate_"):
        update_user_setting(user_id, "phrase_translation", data.endswith("yes"))
        await finish_settings(update)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    word = update.message.text.strip()
    if user_id not in user_settings or not user_settings[user_id]:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start –∏–ª–∏ /menu –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üòä")
        return

    user_words.setdefault(user_id, [])
    if word not in user_words[user_id]:
        user_words[user_id].append(word)
        save_json(WORDS_FILE, user_words)

        translated = ""
        if user_settings[user_id].get("word_translation"):
            try:
                res = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": f"Translate the English word '{word}' to Russian."}],
                    temperature=0.5
                )
                translated = res.choices[0].message.content.strip()
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        if translated:
            await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translated}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ")
        else:
            await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ")
    else:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")

async def delete_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    args = context.args
    if not args:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: /delete hello")
        return
    word = args[0]
    if word in user_words.get(user_id, []):
        user_words[user_id].remove(word)
        save_json(WORDS_FILE, user_words)
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã üóëÔ∏è")
    else:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")

async def send_reminders():
    for user_id, words in user_words.items():
        settings = user_settings.get(user_id)
        if not settings:
            continue

        count = settings.get("word_count", 1)
        selected_words = random.sample(words, min(count, len(words)))
        for word in selected_words:
            source = settings.get("source", "any")
            try:
                prompt = f"Give me a {source} sentence using the English word '{word}'"
                if settings.get("phrase_translation"):
                    prompt += " and translate it to Russian"
                prompt += f". Also mention the source (e.g. Book, Movie: Inception, Song: Imagine)."

                res = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7
                )
                content = res.choices[0].message.content.strip()
                await send_message(user_id, f"üìò –ü—Ä–∏–º–µ—Ä:\n{content}")
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑—ã: {e}")

app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
application = app

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("menu", menu))
app.add_handler(CommandHandler("delete", delete_word))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler))

# –†–∞—Å—Å—ã–ª–∫–∞ –∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤
scheduler.add_job(send_reminders, "interval", hours=8)

if __name__ == "__main__":
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
