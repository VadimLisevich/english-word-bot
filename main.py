# main.py
import logging
import random
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import openai
import asyncio

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv('.env.example')
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

logging.basicConfig(format='%(asctime)s | %(levelname)s | %(message)s', level=logging.INFO)

user_settings = {}
user_words = {}
CATEGORIES = ['–ê—Ñ–æ—Ä–∏–∑–º—ã', '–¶–∏—Ç–∞—Ç—ã', '–ö–∏–Ω–æ', '–ü–µ—Å–Ω–∏', '–õ—é–±–∞—è —Ç–µ–º–∞']

scheduler = AsyncIOScheduler()

# === AI —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def translate_word(word: str) -> str:
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[{"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ '{word}' —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"Translation error for '{word}': {e}")
        return "–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

async def generate_example(word: str, category: str) -> tuple[str, str, str]:
    try:
        prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞ '{word}' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –£–∫–∞–∂–∏ —Ç–∞–∫–∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –ø–µ—Å–Ω–∏. –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§—Ä–∞–∑–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –ò—Å—Ç–æ—á–Ω–∏–∫. –ü–µ—Ä–µ–≤–æ–¥."
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        parts = response.choices[0].message.content.strip().split('\n')
        return parts[0], parts[1], parts[2]
    except Exception as e:
        logging.error(f"Error generating example for word '{word}': {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞.", "", ""

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_settings[user_id] = {}
    await ask_translate_words(update)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_settings[user_id] = {}
    await ask_translate_words(update)

async def ask_translate_words(update: Update):
    keyboard = [[InlineKeyboardButton("–î–∞", callback_data='translate_words_yes'),
                 InlineKeyboardButton("–ù–µ—Ç", callback_data='translate_words_no')]]
    await update.message.reply_text("–ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?", reply_markup=InlineKeyboardMarkup(keyboard))

async def ask_frequency(context, user_id):
    keyboard = [[InlineKeyboardButton(str(i), callback_data=f'frequency_{i}')] for i in [1, 2, 3]]
    await context.bot.send_message(chat_id=user_id, text="–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø–∏—Å–∞–ª —Ç–µ–±–µ?", reply_markup=InlineKeyboardMarkup(keyboard))

async def ask_words_per_message(context, user_id):
    keyboard = [[InlineKeyboardButton(str(n), callback_data=f'words_{n}')] for n in [1, 2, 3, 5]]
    await context.bot.send_message(chat_id=user_id, text="–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))

async def ask_category(context, user_id):
    keyboard = [[InlineKeyboardButton(cat, callback_data=f'category_{cat}')] for cat in CATEGORIES]
    await context.bot.send_message(chat_id=user_id, text="–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))

async def ask_translate_phrases(context, user_id):
    keyboard = [[InlineKeyboardButton("–î–∞", callback_data='translate_phrases_yes'),
                 InlineKeyboardButton("–ù–µ—Ç", callback_data='translate_phrases_no')]]
    await context.bot.send_message(chat_id=user_id, text="–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data.startswith("translate_words"):
        user_settings[user_id]["translate_words"] = data.endswith("yes")
        await ask_frequency(context, user_id)
    elif data.startswith("frequency"):
        user_settings[user_id]["frequency"] = int(data.split('_')[1])
        await ask_words_per_message(context, user_id)
    elif data.startswith("words_"):
        user_settings[user_id]["words_per_message"] = int(data.split('_')[1])
        await ask_category(context, user_id)
    elif data.startswith("category_"):
        user_settings[user_id]["category"] = data.split('_')[1]
        await ask_translate_phrases(context, user_id)
    elif data.startswith("translate_phrases"):
        user_settings[user_id]["translate_phrases"] = data.endswith("yes")
        await context.bot.send_message(chat_id=user_id, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ /menu")
        schedule_user_reminders(user_id, context)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    word = update.message.text.strip().lower()

    if user_id not in user_settings:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.")
        return

    user_words.setdefault(user_id, set()).add(word)

    translate = await translate_word(word)
    category = user_settings[user_id].get("category", "–õ—é–±–∞—è —Ç–µ–º–∞")
    eng_phrase, source, ru_phrase = await generate_example(word, category)

    response = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translate}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\nüìò –ü—Ä–∏–º–µ—Ä:\n{eng_phrase}\n{ru_phrase} –ò—Å—Ç–æ—á–Ω–∏–∫: {source}."
    await update.message.reply_text(response)

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
def schedule_user_reminders(user_id, context):
    scheduler.remove_all_jobs(jobstore=None)
    times = {
        1: ["11:00"],
        2: ["11:00", "15:00"],
        3: ["11:00", "15:00", "19:00"]
    }.get(user_settings[user_id]["frequency"], ["11:00"])

    for t in times:
        hour, minute = map(int, t.split(":"))
        scheduler.add_job(
            send_reminders,
            trigger=CronTrigger(hour=hour, minute=minute),
            args=[context, user_id],
            id=f"reminder_{user_id}_{hour}"
        )

async def send_reminders(context, user_id):
    words = list(user_words.get(user_id, []))
    if not words:
        return

    count = user_settings[user_id].get("words_per_message", 1)
    selected = random.sample(words, min(count, len(words)))

    for word in selected:
        translate = await translate_word(word)
        category = user_settings[user_id].get("category", "–õ—é–±–∞—è —Ç–µ–º–∞")
        eng_phrase, source, ru_phrase = await generate_example(word, category)
        text = f"üïí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n–°–ª–æ–≤–æ: {word}\n–ü–µ—Ä–µ–≤–æ–¥: {translate}\n\nüìò –ü—Ä–∏–º–µ—Ä:\n{eng_phrase}\n{ru_phrase} –ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
        await context.bot.send_message(chat_id=user_id, text=text)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    scheduler.start()
    logging.info("Scheduler started")

    await app.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
