import os
import json
import logging
import random
from datetime import time
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import openai

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(levelname)s | %(message)s')

# === –•—Ä–∞–Ω–∏–ª–∏—â–∞ ===
USERS_FILE = "users.json"
WORDS_FILE = "words.json"
PHRASES_FILE = "phrases.json"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_json(filename):
    if not os.path.exists(filename):
        return {}
    with open(filename, "r") as f:
        return json.load(f)

def save_json(filename, data):
    with open(filename, "w") as f:
        json.dump(data, f, indent=2)

users = load_json(USERS_FILE)
words = load_json(WORDS_FILE)
phrases = load_json(PHRASES_FILE)

# === –§—Ä–∞–∑—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ===
default_phrases = {
    "–ü–µ—Å–Ω–∏": [
        {"sentence": "And I will always love you", "source": "Song", "translation": "–ò —è –≤—Å–µ–≥–¥–∞ –±—É–¥—É –ª—é–±–∏—Ç—å —Ç–µ–±—è"},
        {"sentence": "Let it be, let it be", "source": "Song", "translation": "–ü—É—Å—Ç—å –±—É–¥–µ—Ç —Ç–∞–∫, –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Ç–∞–∫"}
    ],
    "–ö–∏–Ω–æ": [
        {"sentence": "May the Force be with you", "source": "Movie", "translation": "–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π —Å–∏–ª–∞"},
        {"sentence": "Here's looking at you, kid", "source": "Movie", "translation": "–°–º–æ—Ç—Ä—é –Ω–∞ —Ç–µ–±—è, –º–∞–ª—ã—à"}
    ],
    "–ö–Ω–∏–≥–∞": [
        {"sentence": "It was the best of times, it was the worst of times", "source": "Book", "translation": "–≠—Ç–æ –±—ã–ª–æ –ª—É—á—à–µ–µ –∏–∑ –≤—Ä–µ–º—ë–Ω, —ç—Ç–æ –±—ã–ª–æ —Ö—É–¥—à–µ–µ –∏–∑ –≤—Ä–µ–º—ë–Ω"}
    ],
    "–ë–∏–∑–Ω–µ—Å": [
        {"sentence": "We are executing our plan to expand the business", "source": "Business meeting", "translation": "–ú—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—à –ø–ª–∞–Ω –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –±–∏–∑–Ω–µ—Å–∞"}
    ]
}

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º ===
async def translate_word(word: str) -> str:
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a translation bot. Translate to Russian."},
                {"role": "user", "content": f"Translate the word '{word}' to Russian"}
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return "–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

# === –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ ===
def build_menu(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=data)] for text, data in buttons])

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users[user_id] = {"step": "translate_words"}
    save_json(USERS_FILE, users)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ üí¨")
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?", reply_markup=build_menu([("–î–∞", "translate_yes"), ("–ù–µ—Ç", "translate_no")]))

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users[user_id] = {"step": "translate_words"}
    save_json(USERS_FILE, users)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?", reply_markup=build_menu([("–î–∞", "translate_yes"), ("–ù–µ—Ç", "translate_no")]))

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data

    await query.answer()

    if user_id not in users:
        users[user_id] = {}

    step = users[user_id].get("step")

    if step == "translate_words":
        users[user_id]["translate_words"] = data.endswith("yes")
        users[user_id]["step"] = "daily_count"
        await query.message.reply_text("–ö–∞–∫ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=build_menu([("1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", "1"), ("2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", "2"), ("3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", "3")]))
    elif step == "daily_count":
        users[user_id]["times_per_day"] = int(data[0])
        users[user_id]["step"] = "words_per_send"
        await query.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∑–∞ —Ä–∞–∑?", reply_markup=build_menu([("1", "1w"), ("2", "2w"), ("3", "3w"), ("5", "5w")]))
    elif step == "words_per_send":
        users[user_id]["words_per_send"] = int(data[0])
        users[user_id]["step"] = "category"
        await query.message.reply_text("–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=build_menu([("–ü–µ—Å–Ω–∏", "–ü–µ—Å–Ω–∏"), ("–ö–∏–Ω–æ", "–ö–∏–Ω–æ"), ("–ö–Ω–∏–≥–∞", "–ö–Ω–∏–≥–∞"), ("–ë–∏–∑–Ω–µ—Å", "–ë–∏–∑–Ω–µ—Å"), ("–õ—é–±–∞—è —Ç–µ–º–∞", "–õ—é–±–∞—è")]))
    elif step == "category":
        users[user_id]["category"] = data
        users[user_id]["step"] = "translate_phrases"
        await query.message.reply_text("–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?", reply_markup=build_menu([("–î–∞", "phrases_yes"), ("–ù–µ—Ç", "phrases_no")]))
    elif step == "translate_phrases":
        users[user_id]["translate_phrases"] = data.endswith("yes")
        users[user_id]["step"] = "done"
        await query.message.reply_text("üéâ –£—Ä–∞, –º—ã –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏!\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /menu")
        schedule_user_reminders(user_id)
    save_json(USERS_FILE, users)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip()
    
    if text.startswith("/delete "):
        word = text[8:].strip().lower()
        if user_id in words and word in words[user_id]:
            words[user_id].remove(word)
            await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã ‚ùå")
        else:
            await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
        return

    if user_id not in users or users[user_id].get("step") != "done":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start –∏–ª–∏ /menu –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üòä")
        return

    word = text.lower()
    if user_id not in words:
        words[user_id] = []
    if word not in words[user_id]:
        words[user_id].append(word)
        save_json(WORDS_FILE, words)

        translation = await translate_word(word) if users[user_id].get("translate_words") else "üîá –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–∫–ª—é—á—ë–Ω"
        category = users[user_id].get("category", "–õ—é–±–∞—è")
        example = random.choice(default_phrases.get(category, sum(default_phrases.values(), [])))

        reply = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\nüìò –ü—Ä–∏–º–µ—Ä:\n\"{example['sentence']}\" Source: {example['source']}.\n\"{example['translation']}\" –ò—Å—Ç–æ—á–Ω–∏–∫: {example['source']}."
        await update.message.reply_text(reply)
    else:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")

# === –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ ===
async def send_reminders():
    for user_id, data in users.items():
        if data.get("step") != "done":
            continue
        times_per_day = data.get("times_per_day", 1)
        hours = {1: [11], 2: [11, 15], 3: [11, 15, 19]}.get(times_per_day, [11])
        now_hour = int(time().hour)
        if now_hour not in hours:
            continue
        wlist = words.get(user_id, [])
        if not wlist:
            continue
        category = data.get("category", "–õ—é–±–∞—è")
        example = random.choice(default_phrases.get(category, sum(default_phrases.values(), [])))
        chosen = random.choice(wlist)
        translation = await translate_word(chosen) if data.get("translate_words") else ""
        text = f"üß† –°–ª–æ–≤–æ –¥–Ω—è: {chosen} ({translation})\nüìò –ü—Ä–∏–º–µ—Ä:\n\"{example['sentence']}\"\n\"{example['translation']}\""
        try:
            await context.bot.send_message(chat_id=int(user_id), text=text)
        except:
            pass

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
scheduler = BackgroundScheduler()
for hour in [11, 15, 19]:
    scheduler.add_job(send_reminders, CronTrigger(hour=hour, minute=0))
scheduler.start()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()
