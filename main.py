import logging
import os
import random
from datetime import time
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CallbackQueryHandler, CommandHandler,
    ContextTypes, MessageHandler, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from uuid import uuid4
import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env.example
load_dotenv(".env.example")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s", level=logging.INFO
)

# –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–ª–æ–≤
user_data = {}
word_db = {}

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏
TIME_SLOTS = {
    1: [time(11, 0)],
    2: [time(11, 0), time(15, 0)],
    3: [time(11, 0), time(15, 0), time(19, 0)],
}

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ----------

def get_user_settings(user_id):
    return user_data.get(user_id, {
        "translate": True,
        "send_times": 1,
        "words_per_send": 1,
        "category": "–õ—é–±–∞—è —Ç–µ–º–∞",
        "translate_phrases": True,
    })

def get_translation(word):
    try:
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[{
                "role": "user",
                "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: {word}"
            }],
            max_tokens=30,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ '{word}': {e}")
        return "–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

def generate_example(word, category):
    try:
        prompt = f"""–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞ "{word}", –≤ —Å—Ç–∏–ª–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}". –£–∫–∞–∂–∏ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä: —Ñ–∏–ª—å–º, –ø–µ—Å–Ω—è, –∫–Ω–∏–≥–∞, –∏–Ω—Ç–µ—Ä–≤—å—é, –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç. –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
ENGLISH: ...
RUSSIAN: ...
SOURCE: ..."""

        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=150
        )
        content = response.choices[0].message.content
        lines = content.strip().split("\n")
        eng = next((l.split(":", 1)[1].strip() for l in lines if l.startswith("ENGLISH:")), None)
        rus = next((l.split(":", 1)[1].strip() for l in lines if l.startswith("RUSSIAN:")), None)
        source = next((l.split(":", 1)[1].strip() for l in lines if l.startswith("SOURCE:")), None)

        if not all([eng, rus, source]):
            raise ValueError("–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π")
        return eng, rus, source
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è '{word}': {e}")
        return None, None, None

def schedule_user_reminders(user_id, application):
    settings = get_user_settings(user_id)
    times = TIME_SLOTS.get(settings["send_times"], [time(11, 0)])

    for t in times:
        job_id = f"{user_id}_{t.hour}"
        scheduler.add_job(
            send_reminders,
            trigger=CronTrigger(hour=t.hour, minute=t.minute),
            args=[application, user_id],
            id=job_id,
            replace_existing=True,
        )

async def send_reminders(app, user_id):
    settings = get_user_settings(user_id)
    words = word_db.get(user_id, [])
    if not words:
        return

    selected_words = random.sample(words, min(settings["words_per_send"], len(words)))
    for word in selected_words:
        translation = get_translation(word) if settings["translate"] else "–ø–µ—Ä–µ–≤–æ–¥ —Å–∫—Ä—ã—Ç"
        eng, rus, source = generate_example(word, settings["category"])
        if not eng:
            text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è —Å–ª–æ–≤–∞ '{word}'."
        else:
            text = (
                f"üìò –°–ª–æ–≤–æ: *{word}* (–ø–µ—Ä–µ–≤–æ–¥: {translation})\n\n"
                f"_–ü—Ä–∏–º–µ—Ä:_\n{eng}\n{rus}\n_–ò—Å—Ç–æ—á–Ω–∏–∫: {source}_"
            )
        await app.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown")

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = get_user_settings(user_id)
    await context.bot.send_message(
        chat_id=user_id,
        text="–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞. –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ä–∞–±–æ—Ç—É.",
    )
    await ask_translate_word(update, context)

async def ask_translate_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_no")],
    ]
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?",
        reply_markup=InlineKeyboardMarkup(buttons),
    )

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()

    if data.startswith("translate_"):
        user_data[user_id]["translate"] = (data == "translate_yes")
        buttons = [
            [InlineKeyboardButton("1", callback_data="send_1")],
            [InlineKeyboardButton("2", callback_data="send_2")],
            [InlineKeyboardButton("3", callback_data="send_3")],
        ]
        await context.bot.send_message(
            chat_id=user_id,
            text="–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø–∏—Å–∞–ª —Ç–µ–±–µ?",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    elif data.startswith("send_"):
        user_data[user_id]["send_times"] = int(data.split("_")[1])
        buttons = [
            [InlineKeyboardButton("1", callback_data="amount_1")],
            [InlineKeyboardButton("2", callback_data="amount_2")],
            [InlineKeyboardButton("3", callback_data="amount_3")],
            [InlineKeyboardButton("5", callback_data="amount_5")],
        ]
        await context.bot.send_message(
            chat_id=user_id,
            text="–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞ —Ä–∞–∑?",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    elif data.startswith("amount_"):
        user_data[user_id]["words_per_send"] = int(data.split("_")[1])
        buttons = [
            [InlineKeyboardButton("–ê—Ñ–æ—Ä–∏–∑–º—ã", callback_data="category_–ê—Ñ–æ—Ä–∏–∑–º—ã")],
            [InlineKeyboardButton("–¶–∏—Ç–∞—Ç—ã", callback_data="category_–¶–∏—Ç–∞—Ç—ã")],
            [InlineKeyboardButton("–ö–∏–Ω–æ", callback_data="category_–ö–∏–Ω–æ")],
            [InlineKeyboardButton("–ü–µ—Å–Ω–∏", callback_data="category_–ü–µ—Å–Ω–∏")],
            [InlineKeyboardButton("–õ—é–±–∞—è —Ç–µ–º–∞", callback_data="category_–õ—é–±–∞—è —Ç–µ–º–∞")],
        ]
        await context.bot.send_message(
            chat_id=user_id,
            text="–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    elif data.startswith("category_"):
        user_data[user_id]["category"] = data.split("_")[1]
        buttons = [
            [InlineKeyboardButton("–î–∞", callback_data="translate_phrase_yes")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_phrase_no")],
        ]
        await context.bot.send_message(
            chat_id=user_id,
            text="–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    elif data.startswith("translate_phrase_"):
        user_data[user_id]["translate_phrases"] = (data == "translate_phrase_yes")
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∏ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ –±–∞–∑—É.",
        )
        schedule_user_reminders(user_id, context.application)

async def handle_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    word = update.message.text.strip().lower()

    translation = get_translation(word)
    word_db.setdefault(user_id, []).append(word)

    eng, rus, source = generate_example(word, get_user_settings(user_id)["category"])
    if eng:
        text = (
            f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\n"
            f"üìò –ü—Ä–∏–º–µ—Ä:\n{eng}\n{rus}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
        )
    else:
        text = (
            f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\n"
            "üìò –ü—Ä–∏–º–µ—Ä:\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞."
        )

    await context.bot.send_message(chat_id=user_id, text=text)

# ---------- –ó–ê–ü–£–°–ö ----------

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    scheduler.start()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_word))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
