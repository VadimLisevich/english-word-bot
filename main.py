import logging
import os
import json
import random
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler,
                          ContextTypes, filters, ConversationHandler)
from openai import OpenAI

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —ç—Ç–∞–ø–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
(STATE_TRANSLATE_WORDS, STATE_SEND_TIMES, STATE_WORDS_AT_ONCE,
 STATE_PHRASE_SOURCE, STATE_TRANSLATE_PHRASES) = range(5)

# –ü–∞–ø–∫–∞ –∏ —Ñ–∞–π–ª—ã
SETTINGS_FILE = "user_settings.json"
WORDS_FILE = "user_words.json"

# –ö–ª—é—á–∏ –∏–∑ Render (–Ω–µ –∑–∞–±—É–¥—å –∑–∞–¥–∞—Ç—å –∏—Ö –≤ Environment)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(levelname)s | %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π
if not os.path.exists(SETTINGS_FILE):
    with open(SETTINGS_FILE, "w") as f:
        json.dump({}, f)
if not os.path.exists(WORDS_FILE):
    with open(WORDS_FILE, "w") as f:
        json.dump({}, f)

def load_data(filename):
    with open(filename, "r") as f:
        return json.load(f)

def save_data(filename, data):
    with open(filename, "w") as f:
        json.dump(data, f, indent=2)

# === –ö–æ–º–∞–Ω–¥—ã ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    logger.info(f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ /start")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ —Ñ—Ä–∞–∑—ã. "
        "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å—é–¥–∞ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å, –∞ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–∏–º–µ—Ä—ã.\n\n"
        "–û–∫–µ–π, –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞!"
    )
    await update.message.reply_text(
        "–ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∏—Ö –≤ –±–∞–∑—É?",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥")], [KeyboardButton("–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return STATE_TRANSLATE_WORDS

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    logger.info(f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ /menu")
    await update.message.reply_text(
        "–ù–∞—Å—Ç—Ä–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–Ω–æ–≤–æ.\n–ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞?",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥")], [KeyboardButton("–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return STATE_TRANSLATE_WORDS

async def set_translate_words(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    settings = load_data(SETTINGS_FILE)
    settings[user_id] = settings.get(user_id, {})
    settings[user_id]["translate_words"] = (update.message.text == "–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥")
    save_data(SETTINGS_FILE, settings)

    await update.message.reply_text(
        "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("1")], [KeyboardButton("2")], [KeyboardButton("3")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return STATE_SEND_TIMES

async def set_send_times(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    settings = load_data(SETTINGS_FILE)
    settings[user_id]["send_times"] = int(update.message.text)
    save_data(SETTINGS_FILE, settings)

    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑?",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("1")], [KeyboardButton("2")], [KeyboardButton("3")], [KeyboardButton("5")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return STATE_WORDS_AT_ONCE

async def set_words_at_once(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    settings = load_data(SETTINGS_FILE)
    settings[user_id]["words_at_once"] = int(update.message.text)
    save_data(SETTINGS_FILE, settings)

    await update.message.reply_text(
        "–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑?",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–∞—Ñ–æ—Ä–∏–∑–º")], [KeyboardButton("—Ü–∏—Ç–∞—Ç–∞")], [KeyboardButton("–∫–∏–Ω–æ")],
             [KeyboardButton("–ø–µ—Å–Ω–∏")], [KeyboardButton("–ª—é–±–∞—è —Ç–µ–º–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return STATE_PHRASE_SOURCE

async def set_phrase_source(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    settings = load_data(SETTINGS_FILE)
    settings[user_id]["phrase_source"] = update.message.text
    save_data(SETTINGS_FILE, settings)

    await update.message.reply_text(
        "–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ñ—Ä–∞–∑ –Ω—É–∂–µ–Ω?",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–¥–∞")], [KeyboardButton("–Ω–µ—Ç")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return STATE_TRANSLATE_PHRASES

async def set_translate_phrases(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    settings = load_data(SETTINGS_FILE)
    settings[user_id]["translate_phrases"] = (update.message.text == "–¥–∞")
    save_data(SETTINGS_FILE, settings)

    await update.message.reply_text(
        "üéâ –£—Ä–∞, –º—ã –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏!\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /menu",
        reply_markup=None
    )
    return ConversationHandler.END

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ ===

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip().lower()

    if text.startswith("/delete"):
        word_to_delete = text.split("/delete")[-1].strip()
        words = load_data(WORDS_FILE)
        if word_to_delete in words.get(user_id, []):
            words[user_id].remove(word_to_delete)
            save_data(WORDS_FILE, words)
            await update.message.reply_text(f"–°–ª–æ–≤–æ '{word_to_delete}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã ‚ùå")
        else:
            await update.message.reply_text(f"–°–ª–æ–≤–æ '{word_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
        return

    settings = load_data(SETTINGS_FILE)
    if user_id not in settings:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start –∏–ª–∏ /menu –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üòä")
        return

    translate = settings[user_id].get("translate_words", False)
    words = load_data(WORDS_FILE)
    words.setdefault(user_id, [])
    if text not in words[user_id]:
        words[user_id].append(text)
        save_data(WORDS_FILE, words)

    if translate:
        try:
            await update.message.reply_text("‚è≥ –î—É–º–∞—é...")
            prompt = f"What does the word '{text}' mean in Russian? Give one phrase as an example of use (from {settings[user_id]['phrase_source']}) with a short explanation."
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            reply = response.choices[0].message.content.strip()
            await update.message.reply_text(f"{reply}\n\n(–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ")

# === –ó–∞–ø—É—Å–∫ ===

if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CommandHandler("menu", menu)],
        states={
            STATE_TRANSLATE_WORDS: [MessageHandler(filters.TEXT, set_translate_words)],
            STATE_SEND_TIMES: [MessageHandler(filters.TEXT, set_send_times)],
            STATE_WORDS_AT_ONCE: [MessageHandler(filters.TEXT, set_words_at_once)],
            STATE_PHRASE_SOURCE: [MessageHandler(filters.TEXT, set_phrase_source)],
            STATE_TRANSLATE_PHRASES: [MessageHandler(filters.TEXT, set_translate_phrases)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
