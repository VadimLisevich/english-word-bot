import os
import json
import logging
from datetime import datetime
from telegram import Update, ForceReply
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.environ["OPENAI_API_KEY"]
BOT_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
DATA_FILE = "words.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è
def load_words():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
def save_words(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø—Ä–∏–º–µ—Ä–∞
async def get_translation_and_example(word):
    prompt = f"""–¢—ã ‚Äî —É—á–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ "{word}" –∏ –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—Ä–∞–∑–µ (–º–æ–∂–Ω–æ –∏–∑ —Ñ–∏–ª—å–º–∞, –ø–µ—Å–Ω–∏, –ø–æ—Å–ª–æ–≤–∏—Ü—ã –∏ —Ç.–¥.). –§–æ—Ä–º–∞—Ç: 
–ü–µ—Ä–µ–≤–æ–¥: ...
–§—Ä–∞–∑–∞: ..."""
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=100
    )
    return response.choices[0].message["content"]

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞.\n\n–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî —è –¥–∞–º –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä. –í—Å—ë –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–≤–æ—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π üìö"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    word = update.message.text.strip().lower()
    
    data = load_words()
    if user_id not in data:
        data[user_id] = []

    if word in data[user_id]:
        await update.message.reply_text("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π ‚úçÔ∏è")
        return

    await update.message.reply_text("‚è≥ –î—É–º–∞—é...")

    try:
        result = await get_translation_and_example(word)
        data[user_id].append(word)
        save_words(data)
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!\n\n{result}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
