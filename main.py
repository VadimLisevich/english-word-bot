import logging
import os
import json
import random
import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import openai

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(levelname)s | %(message)s')

# –§–∞–π–ª—ã
SETTINGS_FILE = "user_settings.json"
WORDS_FILE = "user_words.json"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = ["–ê—Ñ–æ—Ä–∏–∑–º—ã", "–¶–∏—Ç–∞—Ç—ã", "–ö–∏–Ω–æ", "–ü–µ—Å–Ω–∏", "–õ—é–±–∞—è —Ç–µ–º–∞"]

# –ó–∞–≥—Ä—É–∑–∫–∞ / —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
def load_json(filename):
    if os.path.exists(filename):
        with open(filename, 'r') as f:
            return json.load(f)
    return {}

def save_json(filename, data):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=2)

user_settings = load_json(SETTINGS_FILE)
user_words = load_json(WORDS_FILE)

# –°–ª–æ–≤–∞—Ä—å –≤—Ä–µ–º—ë–Ω —Ä–∞—Å—Å—ã–ª–∫–∏
REMINDER_TIMES = {1: [11], 2: [11, 15], 3: [11, 15, 19]}
scheduler = BackgroundScheduler()
scheduler.start()

# –ù–∞—á–∞–ª–æ / –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ üìö\n\n–î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–∏–º—Å—è.")
    await ask_translate_words(update, context)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–ù–∞—Å—Ç—Ä–æ–∏–º –≤—Å—ë –∑–∞–Ω–æ–≤–æ üõ†Ô∏è")
    await ask_translate_words(update, context)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤–æ–ø—Ä–æ—Å—ã)
async def ask_translate_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_words_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_words_no")]
    ]
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?", reply_markup=InlineKeyboardMarkup(buttons))

async def ask_times_per_day(user_id, context):
    buttons = [[InlineKeyboardButton(str(n), callback_data=f"times_per_day_{n}")] for n in [1, 2, 3]]
    await context.bot.send_message(chat_id=user_id, text="–ö–∞–∫ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(buttons))

async def ask_words_count(user_id, context):
    buttons = [[InlineKeyboardButton(str(n), callback_data=f"words_count_{n}")] for n in [1, 2, 3, 5]]
    await context.bot.send_message(chat_id=user_id, text="–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∑–∞ —Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(buttons))

async def ask_category(user_id, context):
    buttons = [[InlineKeyboardButton(cat, callback_data=f"category_{cat}")] for cat in CATEGORIES]
    await context.bot.send_message(chat_id=user_id, text="–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(buttons))

async def ask_translate_phrases(user_id, context):
    buttons = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_phrases_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_phrases_no")]
    ]
    await context.bot.send_message(chat_id=user_id, text="–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(buttons))

async def complete_setup(user_id, context):
    await context.bot.send_message(chat_id=user_id, text="üéâ –£—Ä–∞, –º—ã –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏!\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /menu")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)

    if user_id not in user_settings:
        user_settings[user_id] = {}

    data = query.data

    if data.startswith("translate_words_"):
        user_settings[user_id]["translate_words"] = data.endswith("yes")
        await ask_times_per_day(user_id, context)

    elif data.startswith("times_per_day_"):
        times = int(data.split("_")[-1])
        user_settings[user_id]["times_per_day"] = times
        await ask_words_count(user_id, context)

    elif data.startswith("words_count_"):
        count = int(data.split("_")[-1])
        user_settings[user_id]["words_count"] = count
        await ask_category(user_id, context)

    elif data.startswith("category_"):
        cat = data.split("_", 1)[-1]
        user_settings[user_id]["category"] = cat
        await ask_translate_phrases(user_id, context)

    elif data.startswith("translate_phrases_"):
        user_settings[user_id]["translate_phrases"] = data.endswith("yes")
        save_json(SETTINGS_FILE, user_settings)
        schedule_user_reminders(user_id, context)
        await complete_setup(user_id, context)

# –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
def translate_word(word):
    try:
        res = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ '{word}' –Ω–∞ —Ä—É—Å—Å–∫–∏–π –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."}],
            max_tokens=20
        )
        return res.choices[0].message["content"].strip()
    except Exception:
        return "–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã
def generate_example(word, category, translate):
    prompt = f"""–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º) —Å–æ —Å–ª–æ–≤–æ–º "{word}" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}". 
–£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, —Ñ–∏–ª—å–º–∞ –∏ —Ç.–¥.), –∏ –ø–µ—Ä–µ–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è."""
    try:
        res = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=150
        )
        return res.choices[0].message["content"].strip()
    except Exception:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤
async def handle_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    word = update.message.text.strip()

    if user_id not in user_settings:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–∞–ø–∏—à–∏ /start –∏–ª–∏ /menu –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üòä")
        return

    translate = translate_word(word) if user_settings[user_id].get("translate_words") else "–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞"
    if user_id not in user_words:
        user_words[user_id] = []

    user_words[user_id].append(word)
    save_json(WORDS_FILE, user_words)

    msg = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translate}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=msg)

    category = user_settings[user_id].get("category", "–õ—é–±–∞—è —Ç–µ–º–∞")
    need_translation = user_settings[user_id].get("translate_phrases", True)
    example = generate_example(word, category, need_translation)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"üìò –ü—Ä–∏–º–µ—Ä:\n{example}")

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
async def delete_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    word = update.message.text.replace("/delete ", "").strip().lower()
    if word in user_words.get(user_id, []):
        user_words[user_id].remove(word)
        save_json(WORDS_FILE, user_words)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã ‚ùå")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")

# –†–∞—Å—Å—ã–ª–∫–∞
async def send_reminders():
    now = datetime.datetime.now().hour
    for user_id, settings in user_settings.items():
        times = REMINDER_TIMES.get(settings.get("times_per_day", 1), [11])
        if now in times:
            count = settings.get("words_count", 1)
            words = random.sample(user_words.get(user_id, []), min(count, len(user_words.get(user_id, []))))
            for word in words:
                translate = translate_word(word) if settings.get("translate_words") else "–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞"
                msg = f"üß† –°–ª–æ–≤–æ –¥–Ω—è: '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translate})"
                await send_message(int(user_id), msg, context=None)
                example = generate_example(word, settings.get("category", "–õ—é–±–∞—è —Ç–µ–º–∞"), settings.get("translate_phrases", True))
                await send_message(int(user_id), f"üìò –ü—Ä–∏–º–µ—Ä:\n{example}", context=None)

async def send_message(user_id, text, context):
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    await app.bot.send_message(chat_id=user_id, text=text)

def schedule_user_reminders(user_id, context):
    for h in [11, 15, 19]:
        scheduler.add_job(send_reminders, CronTrigger(hour=h, minute=0))

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("delete", delete_word))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_word))
    scheduler.add_job(send_reminders, CronTrigger(minute=0))
    app.run_polling()
