import os
import json
import logging
import random
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –§–∞–π–ª—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
SETTINGS_FILE = "user_settings.json"
WORDS_FILE = "words.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Å–ª–æ–≤
if os.path.exists(SETTINGS_FILE):
    with open(SETTINGS_FILE, "r") as f:
        user_settings = json.load(f)
else:
    user_settings = {}

if os.path.exists(WORDS_FILE):
    with open(WORDS_FILE, "r") as f:
        user_words = json.load(f)
else:
    user_words = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
def save_user_settings():
    with open(SETTINGS_FILE, "w") as f:
        json.dump(user_settings, f)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞
def save_user_words():
    with open(WORDS_FILE, "w") as f:
        json.dump(user_words, f)

# –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_settings[user_id] = {}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ —Ñ—Ä–∞–∑—ã. –¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å, –∞ —è –±—É–¥—É —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –¥–∞–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–∏—Ö —Å–ª–æ–≤.\n\n–û–∫–µ–π, –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞!"
    )
    await ask_translate_word(update)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_settings[user_id] = {}
    await ask_translate_word(update)

# –í–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
async def ask_translate_word(update: Update):
    buttons = [[KeyboardButton("–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥")], [KeyboardButton("–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞")]]
    await update.message.reply_text(
        "–ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –µ–≥–æ –≤ –±–∞–∑—É?",
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True),
    )

async def ask_frequency(update: Update):
    buttons = [[KeyboardButton("1")], [KeyboardButton("2")], [KeyboardButton("3")]]
    await update.message.reply_text(
        "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø–∏—Å–∞–ª —Ç–µ–±–µ?",
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True),
    )

async def ask_batch(update: Update):
    buttons = [[KeyboardButton("1")], [KeyboardButton("2")], [KeyboardButton("3")], [KeyboardButton("5")]]
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ê —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True),
    )

async def ask_source_type(update: Update):
    buttons = [
        [KeyboardButton("–∞—Ñ–æ—Ä–∏–∑–º")],
        [KeyboardButton("—Ü–∏—Ç–∞—Ç–∞")],
        [KeyboardButton("–∫–∏–Ω–æ")],
        [KeyboardButton("–ø–µ—Å–Ω–∏")],
        [KeyboardButton("–ª—é–±–∞—è —Ç–µ–º–∞")],
    ]
    await update.message.reply_text(
        "–û–∫–µ–π, –∞ –æ—Ç–∫—É–¥–∞ –ª—É—á—à–µ –±—Ä–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑?",
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True),
    )

async def ask_translate_phrase(update: Update):
    buttons = [[KeyboardButton("–¥–∞")], [KeyboardButton("–Ω–µ—Ç")]]
    await update.message.reply_text(
        "–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ñ—Ä–∞–∑ –Ω—É–∂–µ–Ω?",
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True),
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip().lower()

    if user_id not in user_settings or not user_settings[user_id].get("setup_complete"):
        if text in ["–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥", "–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞"]:
            user_settings[user_id]["translate_word"] = text == "–Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥"
            await ask_frequency(update)
        elif text in ["1", "2", "3"] and "frequency" not in user_settings[user_id]:
            user_settings[user_id]["frequency"] = int(text)
            await ask_batch(update)
        elif text in ["1", "2", "3", "5"] and "batch_size" not in user_settings[user_id]:
            user_settings[user_id]["batch_size"] = int(text)
            await ask_source_type(update)
        elif text in ["–∞—Ñ–æ—Ä–∏–∑–º", "—Ü–∏—Ç–∞—Ç–∞", "–∫–∏–Ω–æ", "–ø–µ—Å–Ω–∏", "–ª—é–±–∞—è —Ç–µ–º–∞"]:
            user_settings[user_id]["source_type"] = text
            await ask_translate_phrase(update)
        elif text in ["–¥–∞", "–Ω–µ—Ç"]:
            user_settings[user_id]["translate_phrase"] = text == "–¥–∞"
            user_settings[user_id]["setup_complete"] = True
            save_user_settings()
            await update.message.reply_text("üéâ –£—Ä–∞, –º—ã –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏!\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /menu")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ. –ò–ª–∏ –Ω–∞–ø–∏—à–∏ /menu –¥–ª—è —Å–±—Ä–æ—Å–∞ ‚ú®")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É
        if user_id not in user_words:
            user_words[user_id] = []
        if text not in user_words[user_id]:
            user_words[user_id].append(text)
            save_user_words()
            await update.message.reply_text(f"–°–ª–æ–≤–æ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ")
        else:
            await update.message.reply_text(f"–°–ª–æ–≤–æ '{text}' —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ üìö")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
scheduler = BackgroundScheduler()

async def send_daily_phrases(application: Application):
    now = datetime.now().hour
    for user_id, settings in user_settings.items():
        if not settings.get("setup_complete"):
            continue
        freq = settings.get("frequency", 1)
        if (freq == 1 and now != 11) or (freq == 2 and now not in [11, 15]) or (freq == 3 and now not in [11, 15, 19]):
            continue

        words = user_words.get(user_id, [])
        if not words:
            continue

        batch = settings.get("batch_size", 1)
        sample = random.sample(words, min(batch, len(words)))

        for word in sample:
            phrase = f"–ü—Ä–∏–º–µ—Ä —Ñ—Ä–∞–∑—ã —Å \"{word}\": 'Life is text, and you are the author.' ‚Äî –∏–∑ —Ñ–∏–ª—å–º–∞ 'Stranger Than Fiction'"
            if settings.get("translate_phrase"):
                phrase += "\n(–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–µ–∫—Å—Ç, –∏ —Ç—ã –µ–≥–æ –∞–≤—Ç–æ—Ä.)"
            try:
                await application.bot.send_message(chat_id=int(user_id), text=phrase)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

scheduler.add_job(lambda: app.create_task(send_daily_phrases(app)), "cron", hour="11,15,19")
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("menu", menu))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
app.run_polling()
