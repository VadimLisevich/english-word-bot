import logging
import os
import random
import asyncio
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CallbackQueryHandler, CommandHandler,
    ContextTypes, MessageHandler, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import openai

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s", level=logging.INFO
)

user_settings = {}
user_words = {}

scheduler = AsyncIOScheduler()

FREQUENCY_TIMES = {
    1: [11],
    2: [11, 15],
    3: [11, 15, 19],
}

THEMES = {
    "aphorisms": "–ê—Ñ–æ—Ä–∏–∑–º—ã",
    "quotes": "–¶–∏—Ç–∞—Ç—ã",
    "movies": "–ö–∏–Ω–æ",
    "songs": "–ü–µ—Å–Ω–∏",
    "any": "–õ—é–±–∞—è —Ç–µ–º–∞",
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_settings[user_id] = {}
    await context.bot.send_message(chat_id=user_id, text="–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ üí¨\n\n–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
    await ask_translate_words(update, context)

async def ask_translate_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_words_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_words_no")]
    ]
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="–ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ask_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="frequency_1")],
        [InlineKeyboardButton("2", callback_data="frequency_2")],
        [InlineKeyboardButton("3", callback_data="frequency_3")]
    ]
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø–∏—Å–∞–ª —Ç–µ–±–µ?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ask_word_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="wordcount_1")],
        [InlineKeyboardButton("2", callback_data="wordcount_2")],
        [InlineKeyboardButton("3", callback_data="wordcount_3")],
        [InlineKeyboardButton("5", callback_data="wordcount_5")]
    ]
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ask_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(name, callback_data=f"theme_{key}")] for key, name in THEMES.items()]
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ask_translate_phrases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_phrases_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_phrases_no")]
    ]
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def done_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    schedule_user_reminders(user_id)
    await context.bot.send_message(
        chat_id=user_id,
        text="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π /menu —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
    )

def schedule_user_reminders(user_id):
    scheduler.remove_all_jobs(jobstore="default")
    settings = user_settings.get(user_id)
    if not settings:
        return

    times = FREQUENCY_TIMES.get(settings.get("frequency", 1), [11])
    for hour in times:
        scheduler.add_job(
            send_reminders,
            trigger=CronTrigger(hour=hour, minute=0),
            args=[user_id],
            id=f"reminder_{user_id}_{hour}"
        )

async def send_reminders(user_id):
    settings = user_settings.get(user_id)
    if not settings:
        return

    words = user_words.get(user_id, [])
    if not words:
        return

    selected = random.sample(words, min(settings.get("word_count", 1), len(words)))
    for word in selected:
        await send_word_with_example(user_id, word)

async def send_word_with_example(chat_id, word):
    try:
        translation = await translate_word(word)
    except Exception as e:
        logging.error(f"Translation error for '{word}': {e}")
        translation = "–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

    try:
        phrase, source = await generate_example(word)
    except Exception as e:
        logging.error(f"Error generating example for word '{word}': {e}")
        phrase, source = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞.", ""

    message = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\nüìò –ü—Ä–∏–º–µ—Ä:\n{phrase}"
    if source:
        message += f" Source: {source}."
    await application.bot.send_message(chat_id=chat_id, text=message)

async def translate_word(word):
    response = await openai.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ '{word}' –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∫—Ä–∞—Ç–∫–æ."}],
        temperature=0.3,
    )
    return response.choices[0].message.content.strip()

async def generate_example(word):
    prompt = f"""–°–æ—Å—Ç–∞–≤—å –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Å–ª–æ–≤–æ–º "{word}" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. 
–ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ —Ç–µ–º–∞, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë. –í –∫–æ–Ω—Ü–µ —É–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –ø–µ—Å–Ω–∏)."""

    response = await openai.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.5,
    )
    output = response.choices[0].message.content.strip()
    if "Source:" in output:
        phrase, source = output.rsplit("Source:", 1)
        return phrase.strip(), source.strip()
    return output, ""

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    word = update.message.text.strip()
    user_words.setdefault(user_id, []).append(word)
    await send_word_with_example(user_id, word)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_settings[user_id] = {}
    await ask_translate_words(update, context)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data.startswith("translate_words_"):
        user_settings[user_id]["translate_words"] = data.endswith("yes")
        await ask_frequency(update, context)
    elif data.startswith("frequency_"):
        user_settings[user_id]["frequency"] = int(data.split("_")[1])
        await ask_word_count(update, context)
    elif data.startswith("wordcount_"):
        user_settings[user_id]["word_count"] = int(data.split("_")[1])
        await ask_theme(update, context)
    elif data.startswith("theme_"):
        user_settings[user_id]["theme"] = data.split("_")[1]
        await ask_translate_phrases(update, context)
    elif data.startswith("translate_phrases_"):
        user_settings[user_id]["translate_phrases"] = data.endswith("yes")
        await done_setup(update, context)

application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("menu", menu))
application.add_handler(CallbackQueryHandler(callback_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == "__main__":
    scheduler.start()
    application.run_polling()
