import logging
import os
import random
import sqlite3
from datetime import datetime
from pytz import timezone

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

import nest_asyncio
nest_asyncio.apply()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DB_NAME = "words.db"
TIMEZONE = "Europe/Lisbon"

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s", level=logging.INFO
)

application = ApplicationBuilder().token(TOKEN).build()
scheduler = AsyncIOScheduler(timezone=timezone(TIMEZONE))

user_settings = {}
user_states = {}

default_settings = {
    "word_translation": True,
    "phrase_times": 1,
    "words_per_time": 1,
    "phrase_category": "–õ—é–±–∞—è —Ç–µ–º–∞",
    "phrase_translation": True,
}


def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS words (
            user_id INTEGER,
            word TEXT,
            PRIMARY KEY (user_id, word)
        )"""
    )
    conn.commit()
    conn.close()


def add_word(user_id: int, word: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO words (user_id, word) VALUES (?, ?)", (user_id, word))
    conn.commit()
    conn.close()


def get_words(user_id: int):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT word FROM words WHERE user_id = ?", (user_id,))
    words = [row[0] for row in cursor.fetchall()]
    conn.close()
    return words


def delete_word(user_id: int, word: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM words WHERE user_id = ? AND word = ?", (user_id, word))
    conn.commit()
    conn.close()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_settings[user_id] = default_settings.copy()
    user_states[user_id] = "ask_word_translation"
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞. –ù–∞—á–Ω—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É!\n\n–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞", callback_data="word_translation_yes")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="word_translation_no")],
        ]),
    )


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_settings[user_id] = default_settings.copy()
    user_states[user_id] = "ask_word_translation"
    await update.message.reply_text(
        "–ò–∑–º–µ–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞", callback_data="word_translation_yes")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="word_translation_no")],
        ]),
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    word = update.message.text.strip()
    add_word(user_id, word)
    translation = f"–ü–µ—Ä–µ–≤–æ–¥: {translate_word(word)}" if user_settings[user_id]["word_translation"] else ""
    example, source = get_example_phrase(word, user_settings[user_id]["phrase_category"])
    phrase_text = f"{example}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}" if user_settings[user_id]["phrase_translation"] else example

    await update.message.reply_text(
        f"–°–ª–æ–≤–æ '{word}' ({translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\nüìò –ü—Ä–∏–º–µ—Ä: {phrase_text}"
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    state = user_states.get(user_id)

    data = query.data
    settings = user_settings[user_id]

    if state == "ask_word_translation":
        settings["word_translation"] = data.endswith("yes")
        user_states[user_id] = "ask_phrase_times"
        await query.message.reply_text(
            "–ö–∞–∫ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data="time_1")],
                [InlineKeyboardButton("2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="time_2")],
                [InlineKeyboardButton("3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="time_3")],
            ])
        )
    elif state == "ask_phrase_times":
        settings["phrase_times"] = int(data[-1])
        user_states[user_id] = "ask_words_per_time"
        await query.message.reply_text(
            "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞ —Ä–∞–∑?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("1", callback_data="words_1"),
                 InlineKeyboardButton("2", callback_data="words_2"),
                 InlineKeyboardButton("3", callback_data="words_3"),
                 InlineKeyboardButton("5", callback_data="words_5")],
            ])
        )
    elif state == "ask_words_per_time":
        settings["words_per_time"] = int(data.split("_")[1])
        user_states[user_id] = "ask_category"
        await query.message.reply_text(
            "–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ê—Ñ–æ—Ä–∏–∑–º—ã", callback_data="cat_–ê—Ñ–æ—Ä–∏–∑–º—ã")],
                [InlineKeyboardButton("–¶–∏—Ç–∞—Ç—ã", callback_data="cat_–¶–∏—Ç–∞—Ç—ã")],
                [InlineKeyboardButton("–ö–∏–Ω–æ", callback_data="cat_–ö–∏–Ω–æ")],
                [InlineKeyboardButton("–ü–µ—Å–Ω–∏", callback_data="cat_–ü–µ—Å–Ω–∏")],
                [InlineKeyboardButton("–õ—é–±–∞—è —Ç–µ–º–∞", callback_data="cat_–õ—é–±–∞—è —Ç–µ–º–∞")],
            ])
        )
    elif state == "ask_category":
        settings["phrase_category"] = data.split("_")[1]
        user_states[user_id] = "ask_phrase_translation"
        await query.message.reply_text(
            "–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞", callback_data="phrase_translation_yes")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data="phrase_translation_no")],
            ])
        )
    elif state == "ask_phrase_translation":
        settings["phrase_translation"] = data.endswith("yes")
        user_states[user_id] = None
        await query.message.reply_text(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /menu"
        )


def translate_word(word):
    return "–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥"  # —Ç—É—Ç –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ API, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏–º


def get_example_phrase(word, category):
    examples = {
        "–ö–∏–Ω–æ": (f"I'm executing the plan perfectly, just like always.", "–§–∏–ª—å–º: Inception"),
        "–ü–µ—Å–Ω–∏": (f"Keep executing dreams like a rockstar.", "–ü–µ—Å–Ω—è: Rockstar"),
        "–ê—Ñ–æ—Ä–∏–∑–º—ã": (f"Executing ideas without action is like winking in the dark.", "–ê—Ñ–æ—Ä–∏–∑–º"),
        "–¶–∏—Ç–∞—Ç—ã": (f"She kept executing tasks flawlessly ‚Äî Steve Jobs", "–¶–∏—Ç–∞—Ç–∞: –°—Ç–∏–≤ –î–∂–æ–±—Å"),
        "–õ—é–±–∞—è —Ç–µ–º–∞": (f"They were executing their duties with pride.", "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç"),
    }
    return examples.get(category, examples["–õ—é–±–∞—è —Ç–µ–º–∞"])


async def send_reminders():
    for user_id, settings in user_settings.items():
        words = get_words(user_id)
        if not words:
            continue
        selected_words = random.sample(words, min(len(words), settings["words_per_time"]))
        for word in selected_words:
            translation = f" (–ø–µ—Ä–µ–≤–æ–¥: {translate_word(word)})" if settings["word_translation"] else ""
            phrase, source = get_example_phrase(word, settings["phrase_category"])
            text = f"–°–ª–æ–≤–æ '{word}'{translation}\nüìò {phrase}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
            await application.bot.send_message(chat_id=user_id, text=text)


def schedule_jobs():
    times = [(11, 0), (15, 0), (19, 0)]
    for idx, (hour, minute) in enumerate(times, start=1):
        scheduler.add_job(
            send_reminders,
            CronTrigger(hour=hour, minute=minute),
            id=f"reminder_{idx}",
            replace_existing=True,
        )
    scheduler.start()


if __name__ == "__main__":
    init_db()
    schedule_jobs()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.run_polling()
