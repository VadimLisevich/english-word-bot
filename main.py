import logging
import os
import random
from datetime import datetime, time
from pytz import timezone

import openai
import nest_asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CallbackQueryHandler, CommandHandler, ContextTypes, MessageHandler, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s | %(levelname)s | %(message)s', level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª—é—á–µ–π
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ü–∞–º—è—Ç—å
user_data = {}

# –§—Ä–∞–∑—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
EXAMPLES = {
    "–ê—Ñ–æ—Ä–∏–∑–º—ã": [
        ("Patience is bitter, but its fruit is sweet.", "–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å"),
        ("Knowing yourself is the beginning of all wisdom.", "–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å"),
    ],
    "–¶–∏—Ç–∞—Ç—ã": [
        ("Be yourself; everyone else is already taken.", "–û—Å–∫–∞—Ä –£–∞–π–ª—å–¥"),
        ("To live is the rarest thing in the world. Most people exist, that is all.", "–û—Å–∫–∞—Ä –£–∞–π–ª—å–¥"),
    ],
    "–ö–∏–Ω–æ": [
        ("May the Force be with you.", "–ó–≤—ë–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã"),
        ("I'll be back.", "–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä"),
    ],
    "–ü–µ—Å–Ω–∏": [
        ("All you need is love.", "The Beatles"),
        ("We don't need no education.", "Pink Floyd"),
    ],
    "–õ—é–±–∞—è —Ç–µ–º–∞": [
        ("Keep moving forward.", "Walt Disney"),
        ("The only limit to our realization of tomorrow is our doubts of today.", "Franklin D. Roosevelt"),
    ]
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user_settings(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            "translate_words": None,
            "times_per_day": None,
            "words_per_batch": None,
            "phrase_source": None,
            "translate_phrases": None,
            "words": []
        }
    return user_data[user_id]

def get_example(word, category):
    try:
        prompt = f"Provide an example sentence with the English word '{word}' from the category '{category}'. Then give a source title (movie, song, etc)."
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"Error generating example for word '{word}': {e}")
        return None

def translate_word(word):
    try:
        prompt = f"Translate the English word '{word}' into Russian. Only return the translation without explanations."
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"Translation error for '{word}': {e}")
        return "–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {
        "translate_words": None,
        "times_per_day": None,
        "words_per_batch": None,
        "phrase_source": None,
        "translate_phrases": None,
        "words": []
    }
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞. –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞ üõ†")
    await ask_translate_words(update, context)

async def ask_translate_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_words_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_words_no")]
    ]
    await update.message.reply_text("–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    settings = get_user_settings(user_id)

    data = query.data
    if data.startswith("translate_words"):
        settings["translate_words"] = data.endswith("yes")
        keyboard = [
            [InlineKeyboardButton("1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data="times_1")],
            [InlineKeyboardButton("2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="times_2")],
            [InlineKeyboardButton("3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="times_3")]
        ]
        await query.message.reply_text("–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —è –ø–∏—Å–∞–ª —Ç–µ–±–µ?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("times_"):
        settings["times_per_day"] = int(data.split("_")[1])
        keyboard = [
            [InlineKeyboardButton("1 —Å–ª–æ–≤–æ", callback_data="batch_1")],
            [InlineKeyboardButton("2 —Å–ª–æ–≤–∞", callback_data="batch_2")],
            [InlineKeyboardButton("3 —Å–ª–æ–≤–∞", callback_data="batch_3")],
            [InlineKeyboardButton("5 —Å–ª–æ–≤", callback_data="batch_5")]
        ]
        await query.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("batch_"):
        settings["words_per_batch"] = int(data.split("_")[1])
        keyboard = [
            [InlineKeyboardButton("–ê—Ñ–æ—Ä–∏–∑–º—ã", callback_data="source_–ê—Ñ–æ—Ä–∏–∑–º—ã")],
            [InlineKeyboardButton("–¶–∏—Ç–∞—Ç—ã", callback_data="source_–¶–∏—Ç–∞—Ç—ã")],
            [InlineKeyboardButton("–ö–∏–Ω–æ", callback_data="source_–ö–∏–Ω–æ")],
            [InlineKeyboardButton("–ü–µ—Å–Ω–∏", callback_data="source_–ü–µ—Å–Ω–∏")],
            [InlineKeyboardButton("–õ—é–±–∞—è —Ç–µ–º–∞", callback_data="source_–õ—é–±–∞—è —Ç–µ–º–∞")]
        ]
        await query.message.reply_text("–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("source_"):
        settings["phrase_source"] = data.split("_", 1)[1]
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data="translate_phrases_yes")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_phrases_no")]
        ]
        await query.message.reply_text("–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("translate_phrases"):
        settings["translate_phrases"] = data.endswith("yes")
        await query.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /menu, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        logging.info(f"Settings for {user_id}: {settings}")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_translate_words(update, context)

async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    settings = get_user_settings(user_id)
    word = update.message.text.strip()
    settings["words"].append(word)

    translation = translate_word(word) if settings["translate_words"] else "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–∫–ª—é—á—ë–Ω"
    example = get_example(word, settings["phrase_source"] or "–õ—é–±–∞—è —Ç–µ–º–∞")

    response = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ"
    if example:
        response += f"\n\nüí¨ –ü—Ä–∏–º–µ—Ä —Ñ—Ä–∞–∑—ã:\n{example}"
    await update.message.reply_text(response)

async def delete_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    settings = get_user_settings(user_id)
    word = update.message.text.replace("/delete", "").strip()
    if word in settings["words"]:
        settings["words"].remove(word)
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã ‚ùå")
    else:
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.")

# –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞
async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    for user_id, settings in user_data.items():
        if not settings["words"]:
            continue
        words_to_send = random.sample(settings["words"], min(settings["words_per_batch"], len(settings["words"])))
        for word in words_to_send:
            translation = translate_word(word) if settings["translate_words"] else "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–∫–ª—é—á—ë–Ω"
            example = get_example(word, settings["phrase_source"] or "–õ—é–±–∞—è —Ç–µ–º–∞")
            text = f"üß† –°–ª–æ–≤–æ: {word}\n–ü–µ—Ä–µ–≤–æ–¥: {translation}"
            if example:
                text += f"\n\nüí¨ –ü—Ä–∏–º–µ—Ä:\n{example}"
            try:
                await context.bot.send_message(chat_id=user_id, text=text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler(timezone=timezone("Europe/Lisbon"))
scheduler.add_job(send_reminders, CronTrigger(hour=11, minute=0))
scheduler.add_job(send_reminders, CronTrigger(hour=15, minute=0))
scheduler.add_job(send_reminders, CronTrigger(hour=19, minute=0))
scheduler.start()

# –ó–∞–ø—É—Å–∫
nest_asyncio.apply()

async def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("delete", delete_word))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_word))
    await app.run_polling()

import asyncio
asyncio.run(main())
