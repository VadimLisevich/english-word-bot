import os
import json
import logging
import random
import threading
from datetime import datetime
from http.server import BaseHTTPRequestHandler, HTTPServer

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from apscheduler.schedulers.background import BackgroundScheduler

BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
SETTINGS_FILE = "user_settings.json"
WORDS_FILE = "words.json"
SEND_TIMES = {1: [11], 2: [11, 15], 3: [11, 15, 19]}

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

# ==== –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====
def load_json(filename):
    if not os.path.exists(filename):
        return {}
    with open(filename, "r") as f:
        return json.load(f)

def save_json(filename, data):
    with open(filename, "w") as f:
        json.dump(data, f, indent=2)

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    context.user_data["settings_mode"] = True
    context.user_data["step"] = "translate_word"
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ —Ñ—Ä–∞–∑—ã.\n\n"
        "–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å, "
        "–∞ —è –±—É–¥—É —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –¥–∞–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–∏—Ö —Å–ª–æ–≤.\n\n"
        "–û–∫–µ–π, –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞!"
    )
    await ask_translate_word(update, context)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["settings_mode"] = True
    context.user_data["step"] = "translate_word"
    await update.message.reply_text("üõ† –î–∞–≤–∞–π —Å–Ω–æ–≤–∞ –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞!")
    await ask_translate_word(update, context)

# ==== –í–æ–ø—Ä–æ—Å—ã ====
async def ask_translate_word(update, context):
    kb = [[InlineKeyboardButton("üîï –ë–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞", callback_data="translate_word:no")],
          [InlineKeyboardButton("üî§ –ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥", callback_data="translate_word:yes")]]
    await update.message.reply_text("–ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –µ–≥–æ –≤ –±–∞–∑—É?",
                                    reply_markup=InlineKeyboardMarkup(kb))

async def ask_frequency(update, context):
    kb = [[InlineKeyboardButton(str(i), callback_data=f"frequency:{i}")] for i in [1, 2, 3]]
    await update.callback_query.message.reply_text("–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø–∏—Å–∞–ª —Ç–µ–±–µ?",
                                                   reply_markup=InlineKeyboardMarkup(kb))

async def ask_batch_size(update, context):
    kb = [[InlineKeyboardButton(str(i), callback_data=f"batch:{i}")] for i in [1, 2, 3, 5]]
    await update.callback_query.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å?",
                                                   reply_markup=InlineKeyboardMarkup(kb))

async def ask_source_type(update, context):
    types = ["aphorism", "quote", "movie", "song", "any"]
    names = ["üß† –ê—Ñ–æ—Ä–∏–∑–º", "üìñ –¶–∏—Ç–∞—Ç–∞", "üé¨ –ö–∏–Ω–æ", "üéµ –ü–µ—Å–Ω–∏", "üåç –õ—é–±–∞—è —Ç–µ–º–∞"]
    kb = [[InlineKeyboardButton(names[i], callback_data=f"source:{types[i]}")] for i in range(5)]
    await update.callback_query.message.reply_text("–û–∫–µ–π, –∞ –æ—Ç–∫—É–¥–∞ –ª—É—á—à–µ –±—Ä–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑?",
                                                   reply_markup=InlineKeyboardMarkup(kb))

async def ask_phrase_translation(update, context):
    kb = [[InlineKeyboardButton("–î–∞", callback_data="phrase_translate:yes")],
          [InlineKeyboardButton("–ù–µ—Ç", callback_data="phrase_translate:no")]]
    await update.callback_query.message.reply_text("–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ñ—Ä–∞–∑ –Ω—É–∂–µ–Ω?",
                                                   reply_markup=InlineKeyboardMarkup(kb))

# ==== Callback ====
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    settings = load_json(SETTINGS_FILE)
    if user_id not in settings:
        settings[user_id] = {}

    key, value = query.data.split(":")

    if key == "translate_word":
        settings[user_id]["translate_word"] = value == "yes"
        await ask_frequency(update, context)

    elif key == "frequency":
        settings[user_id]["frequency"] = int(value)
        await ask_batch_size(update, context)

    elif key == "batch":
        settings[user_id]["batch_size"] = int(value)
        await ask_source_type(update, context)

    elif key == "source":
        settings[user_id]["source_type"] = value
        await ask_phrase_translation(update, context)

    elif key == "phrase_translate":
        settings[user_id]["translate_phrase"] = value == "yes"
        await query.message.reply_text("üéâ –£—Ä–∞, –º—ã –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏!\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /menu")

    save_json(SETTINGS_FILE, settings)

# ==== –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ—Ä–∞–∑ ====
def generate_phrase(word, source_type, translate):
    source_map = {
        "aphorism": "–∞—Ñ–æ—Ä–∏–∑–º",
        "quote": "—Ü–∏—Ç–∞—Ç–∞",
        "movie": "—Ñ–∏–ª—å–º ‚ÄòInception‚Äô",
        "song": "–ø–µ—Å–Ω—è ‚ÄòImagine‚Äô",
        "any": random.choice(["–∞—Ñ–æ—Ä–∏–∑–º", "—Ñ–∏–ª—å–º ‚ÄòMatrix‚Äô", "—Ü–∏—Ç–∞—Ç–∞ –∏–∑ –∫–Ω–∏–≥–∏"])
    }
    phrase = f"This is an example phrase with the word '{word}'."
    translation = f"–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ñ—Ä–∞–∑—ã —Å–æ —Å–ª–æ–≤–æ–º '{word}'."
    source = source_map.get(source_type, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
    return f"üß† –°–ª–æ–≤–æ: {word}\nüí¨ –§—Ä–∞–∑–∞: {phrase}" + (f"\nüîÅ –ü–µ—Ä–µ–≤–æ–¥: {translation}" if translate else "") + f"\nüìç–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"

# ==== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ====
def send_scheduled_messages(app):
    now = datetime.now()
    settings = load_json(SETTINGS_FILE)
    words = load_json(WORDS_FILE)

    for user_id, cfg in settings.items():
        times = SEND_TIMES.get(cfg.get("frequency", 1), [11])
        if now.hour not in times:
            continue
        batch_size = cfg.get("batch_size", 1)
        word_list = words.get(user_id, [])
        if not word_list:
            continue
        selected = random.sample(word_list, min(len(word_list), batch_size))
        for word in selected:
            text = generate_phrase(word, cfg.get("source_type", "any"), cfg.get("translate_phrase", False))
            try:
                app.bot.send_message(chat_id=int(user_id), text=text)
            except Exception as e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

# ==== Fake HTTP –¥–ª—è Render ====
class PingHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is alive.")

def run_fake_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("", port), PingHandler)
    server.serve_forever()

# ==== –ó–∞–ø—É—Å–∫ ====
if __name__ == "__main__":
    threading.Thread(target=run_fake_server).start()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND,
                                   lambda u, c: u.message.reply_text("–ù–∞–ø–∏—à–∏ /start –∏–ª–∏ /menu –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üòä")))

    scheduler = BackgroundScheduler()
    scheduler.add_job(send_scheduled_messages, "cron", minute="0", args=[app])  # –∫–∞–∂–¥—ã–µ –ø–æ–ª–Ω—ã–µ —á–∞—Å—ã
    scheduler.start()

    logging.info("ü§ñ –ë–æ—Ç —Å –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–æ–π –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
