import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import (
    add_user_word,
    get_user_settings,
    set_user_setting,
    get_random_phrase_with_word,
    delete_word,
    get_words_by_user,
    init_user_settings
)
from translator import translate_word, translate_text


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user_settings(user_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞. –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞.")
    await ask_translate_words(update, context)


async def ask_translate_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_words:yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_words:no")]
    ]
    await update.message.reply_text("–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?", reply_markup=InlineKeyboardMarkup(keyboard))


async def ask_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="frequency:1"),
         InlineKeyboardButton("2", callback_data="frequency:2"),
         InlineKeyboardButton("3", callback_data="frequency:3")]
    ]
    await update.callback_query.message.reply_text("–ö–∞–∫ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã? (–≤ –¥–µ–Ω—å)", reply_markup=InlineKeyboardMarkup(keyboard))


async def ask_words_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="count:1"),
         InlineKeyboardButton("2", callback_data="count:2"),
         InlineKeyboardButton("3", callback_data="count:3"),
         InlineKeyboardButton("5", callback_data="count:5")]
    ]
    await update.callback_query.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞ —Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))


async def ask_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ê—Ñ–æ—Ä–∏–∑–º—ã", callback_data="category:aphorisms")],
        [InlineKeyboardButton("–¶–∏—Ç–∞—Ç—ã", callback_data="category:quotes")],
        [InlineKeyboardButton("–ö–∏–Ω–æ", callback_data="category:movies")],
        [InlineKeyboardButton("–ü–µ—Å–Ω–∏", callback_data="category:songs")],
        [InlineKeyboardButton("–õ—é–±–∞—è —Ç–µ–º–∞", callback_data="category:any")]
    ]
    await update.callback_query.message.reply_text("–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))


async def ask_translate_phrases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_phrases:yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_phrases:no")]
    ]
    await update.callback_query.message.reply_text("–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))


async def finish_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–∂–º–∏ /menu")


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    key, value = query.data.split(":")
    user_id = query.from_user.id
    set_user_setting(user_id, key, value)

    if key == "translate_words":
        await ask_frequency(update, context)
    elif key == "frequency":
        await ask_words_count(update, context)
    elif key == "count":
        await ask_category(update, context)
    elif key == "category":
        await ask_translate_phrases(update, context)
    elif key == "translate_phrases":
        await finish_setup(update, context)


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_translate_words(update, context)


async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add.")
        return
    word = context.args[0].lower()
    translation = translate_word(word)

    add_user_word(user_id, word, translation)

    settings = get_user_settings(user_id)
    category = settings.get("category", "any")
    phrase_data = get_random_phrase_with_word(word, category)

    if not phrase_data:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ—Ä–∞–∑—É —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º.")
        return

    phrase, source = phrase_data
    msg = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\nüìò –ü—Ä–∏–º–µ—Ä: {phrase}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
    if settings.get("translate_phrases", "no") == "yes":
        phrase_translation = translate_text(phrase)
        msg += f"\nüí¨ –ü–µ—Ä–µ–≤–æ–¥: {phrase_translation}"

    await update.message.reply_text(msg)


async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    application = context.application
    user_ids = get_words_by_user()

    for user_id, words in user_ids.items():
        settings = get_user_settings(user_id)
        count = int(settings.get("count", 1))
        category = settings.get("category", "any")
        send_translation = settings.get("translate_phrases", "no") == "yes"

        words_sample = random.sample(words, min(len(words), count))
        for word, translation in words_sample:
            phrase_data = get_random_phrase_with_word(word, category)
            if phrase_data:
                phrase, source = phrase_data
                message = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation})\nüìò {phrase}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
                if send_translation:
                    phrase_translation = translate_text(phrase)
                    message += f"\nüí¨ –ü–µ—Ä–µ–≤–æ–¥: {phrase_translation}"
                await application.bot.send_message(chat_id=user_id, text=message)


async def delete_word_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.")
        return

    word = context.args[0].lower()
    success = delete_word(user_id, word)
    if success:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã üóëÔ∏è")
    else:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
