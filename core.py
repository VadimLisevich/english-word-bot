from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import random

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞
user_words = {}         # user_id: [word1, word2, ...]
user_settings = {}      # user_id: {'translate_phrase': True}

# –§–∏–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ API)
def translate_word(word):
    return f"–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '{word}'"

def translate_phrase(phrase):
    return f"–ü–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑—ã: {phrase}"

def get_example_with_word(word):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —Ñ—Ä–∞–∑—ã —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º
    return {
        "text": f"The word '{word}' appears in this example sentence.",
        "source": "–§–∏–ª—å–º: Inception"
    }

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_settings[user_id] = {'translate_phrase': True}
    user_words[user_id] = []
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∏ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ –±–∞–∑—É.")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîß –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏")

async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    word = update.message.text.strip()
    translation = translate_word(word)
    example = get_example_with_word(word)
    phrase_translation = translate_phrase(example["text"]) if user_settings.get(user_id, {}).get('translate_phrase') else None

    user_words.setdefault(user_id, []).append(word)

    response = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\n"
    response += f"üìò –ü—Ä–∏–º–µ—Ä: {example['text']}\n"
    if phrase_translation:
        response += f"{phrase_translation}\n"
    response += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {example['source']}"
    await update.message.reply_text(response)

async def send_reminders():
    for user_id, words in user_words.items():
        if not words:
            continue
        word = random.choice(words)
        example = get_example_with_word(word)
        translation = translate_word(word)
        phrase_translation = translate_phrase(example["text"]) if user_settings.get(user_id, {}).get('translate_phrase') else None

        message = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation})\n"
        message += f"üìò {example['text']}\n"
        if phrase_translation:
            message += f"{phrase_translation}\n"
        message += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {example['source']}"

        # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ context —É —Ç–µ–±—è –≥–ª–æ–±–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏–ª–∏ –∑–∞–º–æ–∫–∞–Ω
        try:
            await application.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
