from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import (
    get_user_settings,
    set_user_setting,
    add_user_word,
    get_words_by_user,
    delete_word,
    get_random_phrase_with_word,
)
from translation import translate_word, translate_phrase
from scheduler import schedule_reminders
import random

settings_questions = [
    {"key": "translate_word", "question": "–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?", "options": [("–î–∞", "yes"), ("–ù–µ—Ç", "no")]},
    {"key": "frequency", "question": "–ö–∞–∫ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã?", "options": [("1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", "1"), ("2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", "2"), ("3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", "3")]},
    {"key": "words_per_message", "question": "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞ —Ä–∞–∑?", "options": [("1", "1"), ("2", "2"), ("3", "3"), ("5", "5")]},
    {"key": "phrase_topic", "question": "–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?", "options": [("–ê—Ñ–æ—Ä–∏–∑–º—ã", "Aphorisms"), ("–¶–∏—Ç–∞—Ç—ã", "Quotes"), ("–ö–∏–Ω–æ", "Movies"), ("–ü–µ—Å–Ω–∏", "Songs"), ("–õ—é–±–∞—è —Ç–µ–º–∞", "Any")]},
    {"key": "translate_phrase", "question": "–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?", "options": [("–î–∞", "yes"), ("–ù–µ—Ç", "no")]},
]

user_states = {}

def get_settings_keyboard(question_data):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(text, callback_data=f"set:{question_data['key']}:{value}")]
        for text, value in question_data["options"]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –æ–ø—ã—Ç üìö")
    user_states[update.effective_user.id] = 0
    await ask_next_setting(update, context)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_states[update.effective_user.id] = 0
    await ask_next_setting(update, context)

async def ask_next_setting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state_index = user_states.get(user_id, 0)
    if state_index < len(settings_questions):
        question_data = settings_questions[state_index]
        await context.bot.send_message(chat_id=user_id, text=question_data["question"], reply_markup=get_settings_keyboard(question_data))
    else:
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        schedule_reminders(context.application, user_id)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    if data.startswith("set:"):
        _, key, value = data.split(":")
        set_user_setting(user_id, key, value)
        user_states[user_id] += 1
        await ask_next_setting(update, context)
    elif data.startswith("delete:"):
        _, word = data.split(":")
        delete_word(user_id, word)
        await query.edit_message_text(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã ‚ùå")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    word = update.message.text.strip()
    settings = get_user_settings(user_id)
    translation = translate_word(word) if settings.get("translate_word") == "yes" else None

    add_user_word(user_id, word)

    phrase_data = get_random_phrase_with_word(word, settings.get("phrase_topic", "Any"))
    if not phrase_data:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation or '–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞'}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n‚ùóÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–º–µ—Ä —Ñ—Ä–∞–∑—ã —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º.")
        return

    phrase, source = phrase_data
    phrase_translation = translate_phrase(phrase) if settings.get("translate_phrase") == "yes" else None

    response = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation or '–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞'}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\nüìò {phrase}"
    if phrase_translation:
        response += f"\nüìç –ü–µ—Ä–µ–≤–æ–¥: {phrase_translation}"
    if source:
        response += f"\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
    await update.message.reply_text(response)

async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    app = context.application
    all_users = get_user_settings()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {user_id: settings}
    for user_id, settings in all_users.items():
        words = get_words_by_user(user_id)
        if not words:
            continue

        words_sample = random.sample(words, min(len(words), int(settings.get("words_per_message", 1))))
        for word in words_sample:
            translation = translate_word(word) if settings.get("translate_word") == "yes" else None
            phrase_data = get_random_phrase_with_word(word, settings.get("phrase_topic", "Any"))
            if not phrase_data:
                continue
            phrase, source = phrase_data
            phrase_translation = translate_phrase(phrase) if settings.get("translate_phrase") == "yes" else None

            text = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation or '–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞'})"
            text += f"\nüìò {phrase}"
            if phrase_translation:
                text += f"\nüìç –ü–µ—Ä–µ–≤–æ–¥: {phrase_translation}"
            if source:
                text += f"\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"

            await app.bot.send_message(chat_id=user_id, text=text)
