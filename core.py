from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)
from database import (
    add_user, add_user_word, get_user_settings, set_user_setting,
    delete_word, get_words_by_user, init_user_settings
)
from translator import translate_word, translate_text
from phrases import get_random_phrase_with_word

async def start_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    add_user(user_id)
    init_user_settings(user_id)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞. –ù–∞—á–Ω—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
    await ask_translate_words(update, context)

async def ask_translate_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_words_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_words_no")]
    ]
    await update.message.reply_text("üî§ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞?", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    settings_map = {
        "translate_words_": "translate_words",
        "reminders_": "reminders_per_day",
        "words_": "words_per_reminder",
        "category_": "category",
        "translate_phrases_": "translate_phrases"
    }

    for prefix, setting in settings_map.items():
        if data.startswith(prefix):
            value = data.replace(prefix, "")
            if value.isdigit():
                value = int(value)
            elif value.lower() in ["yes", "–¥–∞"]:
                value = True
            elif value.lower() in ["no", "–Ω–µ—Ç"]:
                value = False
            set_user_setting(user_id, setting, value)

    next_step = {
        "translate_words_": ask_reminders_per_day,
        "reminders_": ask_words_per_reminder,
        "words_": ask_category,
        "category_": ask_translate_phrases,
        "translate_phrases_": done_settings
    }

    for prefix, func in next_step.items():
        if data.startswith(prefix):
            await func(update, context)
            break

async def ask_reminders_per_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="reminders_1")],
        [InlineKeyboardButton("2", callback_data="reminders_2")],
        [InlineKeyboardButton("3", callback_data="reminders_3")]
    ]
    await update.effective_message.reply_text("üïí –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))

async def ask_words_per_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="words_1"), InlineKeyboardButton("2", callback_data="words_2")],
        [InlineKeyboardButton("3", callback_data="words_3"), InlineKeyboardButton("5", callback_data="words_5")]
    ]
    await update.effective_message.reply_text("üìö –°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞ —Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))

async def ask_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ê—Ñ–æ—Ä–∏–∑–º—ã", callback_data="category_–ê—Ñ–æ—Ä–∏–∑–º—ã")],
        [InlineKeyboardButton("–¶–∏—Ç–∞—Ç—ã", callback_data="category_–¶–∏—Ç–∞—Ç—ã")],
        [InlineKeyboardButton("–ö–∏–Ω–æ", callback_data="category_–ö–∏–Ω–æ")],
        [InlineKeyboardButton("–ü–µ—Å–Ω–∏", callback_data="category_–ü–µ—Å–Ω–∏")],
        [InlineKeyboardButton("–õ—é–±–∞—è —Ç–µ–º–∞", callback_data="category_–õ—é–±–∞—è —Ç–µ–º–∞")]
    ]
    await update.effective_message.reply_text("üé≠ –û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))

async def ask_translate_phrases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_phrases_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_phrases_no")]
    ]
    await update.effective_message.reply_text("üåç –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ª–∏ —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))

async def done_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π /menu, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.")

start = CommandHandler("start", start_func)
menu = CommandHandler("menu", start_func)
handle_callback = CallbackQueryHandler(handle_callback)

async def handle_message_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    word = update.message.text.strip()

    settings = get_user_settings(user_id)
    translate = settings.get("translate_words", True)
    category = settings.get("category", "–õ—é–±–∞—è —Ç–µ–º–∞")
    translate_phrase = settings.get("translate_phrases", True)

    word_translation = translate_word(word) if translate else "–ë–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞"
    phrase_data = get_random_phrase_with_word(word, category)

    phrase = phrase_data.get("phrase")
    source = phrase_data.get("source")
    phrase_translation = translate_text(phrase) if translate_phrase else None

    add_user_word(user_id, word, word_translation, source, phrase, phrase_translation)

    text = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {word_translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\n"
    text += f"üìò –ü—Ä–∏–º–µ—Ä: {phrase}\n"
    if phrase_translation:
        text += f"üí¨ –ü–µ—Ä–µ–≤–æ–¥: {phrase_translation}\n"
    text += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"

    await update.message.reply_text(text)

handle_message = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message_func)

add_word = handle_message

delete_word_command = CommandHandler("delete", lambda u, c: u.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"))

view_words_command = CommandHandler("words", lambda u, c: u.message.reply_text("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"))

async def send_reminders(bot, user_id, settings):
    from random import choice
    words = get_words_by_user(user_id)
    if not words:
        return

    count = settings.get("words_per_reminder", 1)
    selected_words = [choice(words) for _ in range(count)]

    for word_data in selected_words:
        word = word_data["word"]
        translation = word_data["translation"]
        phrase = word_data["phrase"]
        phrase_translation = word_data["phrase_translation"]
        source = word_data["source"]

        text = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {translation})\n"
        text += f"üìò {phrase}\n"
        if phrase_translation:
            text += f"üí¨ –ü–µ—Ä–µ–≤–æ–¥: {phrase_translation}\n"
        text += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"

        await bot.send_message(chat_id=user_id, text=text)
