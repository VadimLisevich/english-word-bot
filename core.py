import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import (
    add_user, add_user_word, get_user_settings, set_user_setting,
    get_words_by_user, delete_word, get_random_phrase_with_word
)
from translator import translate_word, translate_text


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    add_user(user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ üìö\n\n–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞ –ø–æ–¥ —Ç–µ–±—è.")
    await ask_translate_word(update, context)


async def ask_translate_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_word_yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_word_no")]
    ]
    await update.effective_chat.send_message("–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?", reply_markup=InlineKeyboardMarkup(keyboard))


async def ask_reminders_per_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="reminders_1"),
         InlineKeyboardButton("2", callback_data="reminders_2"),
         InlineKeyboardButton("3", callback_data="reminders_3")]
    ]
    await update.effective_chat.send_message("–ö–∞–∫ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))


async def ask_words_per_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="words_1"),
         InlineKeyboardButton("2", callback_data="words_2"),
         InlineKeyboardButton("3", callback_data="words_3"),
         InlineKeyboardButton("5", callback_data="words_5")]
    ]
    await update.effective_chat.send_message("–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞ —Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))


async def ask_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ê—Ñ–æ—Ä–∏–∑–º—ã", callback_data="category_aphorisms"),
         InlineKeyboardButton("–¶–∏—Ç–∞—Ç—ã", callback_data="category_quotes")],
        [InlineKeyboardButton("–ö–∏–Ω–æ", callback_data="category_movies"),
         InlineKeyboardButton("–ü–µ—Å–Ω–∏", callback_data="category_songs")],
        [InlineKeyboardButton("–õ—é–±–∞—è —Ç–µ–º–∞", callback_data="category_any")]
    ]
    await update.effective_chat.send_message("–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))


async def ask_translate_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_phrase_yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_phrase_no")]
    ]
    await update.effective_chat.send_message("–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data.startswith("translate_word_"):
        value = data.split("_")[-1] == "yes"
        set_user_setting(user_id, "translate_word", value)
        await ask_reminders_per_day(update, context)
    elif data.startswith("reminders_"):
        value = int(data.split("_")[-1])
        set_user_setting(user_id, "reminders_per_day", value)
        await ask_words_per_message(update, context)
    elif data.startswith("words_"):
        value = int(data.split("_")[-1])
        set_user_setting(user_id, "words_per_message", value)
        await ask_category(update, context)
    elif data.startswith("category_"):
        value = data.split("_")[-1]
        set_user_setting(user_id, "category", value)
        await ask_translate_phrase(update, context)
    elif data.startswith("translate_phrase_"):
        value = data.split("_")[-1] == "yes"
        set_user_setting(user_id, "translate_phrase", value)
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ.")
        await context.bot.send_message(chat_id=user_id, text="–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–≤–µ–¥–∏—Ç–µ /menu")
    elif data.startswith("delete_"):
        word = data.split("_", 1)[-1]
        delete_word(user_id, word)
        await context.bot.send_message(chat_id=user_id, text=f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã ‚ùå")


async def handle_message_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    word = update.message.text.strip().lower()

    settings = get_user_settings(user_id)
    if not settings:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É ‚Äî –≤–≤–µ–¥–∏ /start –∏–ª–∏ /menu")
        return

    word_translation = translate_word(word) if settings.get("translate_word") else "‚Äî"

    category = settings.get("category", "any")
    phrase_data = get_random_phrase_with_word(word, category)

    if phrase_data:
        phrase, source = phrase_data
        phrase_translation = translate_text(phrase) if settings.get("translate_phrase") else None
    else:
        phrase = "–ü—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
        source = "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        phrase_translation = None

    add_user_word(user_id, word, word_translation, source, phrase, phrase_translation)

    msg = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {word_translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\nüìò –ü—Ä–∏–º–µ—Ä: {phrase}"
    if phrase_translation:
        msg += f"\nüí¨ –ü–µ—Ä–µ–≤–æ–¥: {phrase_translation}"
    msg += f"\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"

    await update.message.reply_text(msg)


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò–∑–º–µ–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†Ô∏è")
    await ask_translate_word(update, context)
