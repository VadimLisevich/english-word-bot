from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import (
    add_user, add_user_word, get_user_settings, set_user_setting,
    get_words_by_user, delete_word, init_user_settings
)
from phrases import get_random_phrase_with_word
from translator import translate_word, translate_text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    add_user(user_id)
    init_user_settings(user_id)

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞. –ù–∞—á–Ω—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
    await ask_translate_word(update)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    await ask_translate_word(update)

async def ask_translate_word(update: Update):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_word:yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_word:no")]
    ]
    await update.message.reply_text("–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤?", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    if ":" in data:
        setting, value = data.split(":")
        set_user_setting(user_id, setting, value)
        next_question = {
            "translate_word": ask_reminders_per_day,
            "reminders_per_day": ask_words_per_message,
            "words_per_message": ask_category,
            "category": ask_translate_phrase,
            "translate_phrase": settings_complete
        }
        if setting in next_question:
            await next_question[setting](query.message)

async def ask_reminders_per_day(message):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="reminders_per_day:1"),
         InlineKeyboardButton("2", callback_data="reminders_per_day:2"),
         InlineKeyboardButton("3", callback_data="reminders_per_day:3")]
    ]
    await message.reply_text("–ö–∞–∫ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))

async def ask_words_per_message(message):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="words_per_message:1"),
         InlineKeyboardButton("2", callback_data="words_per_message:2"),
         InlineKeyboardButton("3", callback_data="words_per_message:3"),
         InlineKeyboardButton("5", callback_data="words_per_message:5")]
    ]
    await message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞ —Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))

async def ask_category(message):
    keyboard = [
        [InlineKeyboardButton("–ê—Ñ–æ—Ä–∏–∑–º—ã", callback_data="category:–ê—Ñ–æ—Ä–∏–∑–º—ã")],
        [InlineKeyboardButton("–¶–∏—Ç–∞—Ç—ã", callback_data="category:–¶–∏—Ç–∞—Ç—ã")],
        [InlineKeyboardButton("–ö–∏–Ω–æ", callback_data="category:–ö–∏–Ω–æ")],
        [InlineKeyboardButton("–ü–µ—Å–Ω–∏", callback_data="category:–ü–µ—Å–Ω–∏")],
        [InlineKeyboardButton("–õ—é–±–∞—è —Ç–µ–º–∞", callback_data="category:–õ—é–±–∞—è —Ç–µ–º–∞")]
    ]
    await message.reply_text("–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))

async def ask_translate_phrase(message):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="translate_phrase:yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="translate_phrase:no")]
    ]
    await message.reply_text("–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))

async def settings_complete(message):
    await message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã —è –¥–æ–±–∞–≤–∏–ª –µ–≥–æ –≤ –±–∞–∑—É. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /menu, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

async def handle_message_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    word = update.message.text.strip()

    word_translation = translate_word(word)
    settings = get_user_settings(user_id)
    category = settings.get("category", "–õ—é–±–∞—è —Ç–µ–º–∞")
    phrase_data = get_random_phrase_with_word(word, category)

    if not phrase_data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ—Ä–∞–∑—É —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º.")
        return

    phrase, source = phrase_data
    phrase_translation = translate_text(phrase) if settings.get("translate_phrase") == "yes" else None

    add_user_word(user_id, word, word_translation, source, phrase, phrase_translation)

    response = f"–°–ª–æ–≤–æ '{word}' (–ø–µ—Ä–µ–≤–æ–¥: {word_translation}) ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É ‚úÖ\n\nüìò –ü—Ä–∏–º–µ—Ä: {phrase}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
    if phrase_translation:
        response += f"\n\nüìó –ü–µ—Ä–µ–≤–æ–¥: {phrase_translation}"

    await update.message.reply_text(response)

async def add_word_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.")

async def view_words_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    words = get_words_by_user(user_id)
    if not words:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.")
        return

    message = "–í–∞—à–∏ —Å–ª–æ–≤–∞:\n\n"
    for word, translation in words:
        message += f"‚Ä¢ {word} ‚Äì {translation}\n"
    await update.message.reply_text(message)

async def delete_word_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: /delete —Å–ª–æ–≤–æ")
        return

    word = args[0]
    user_id = update.effective_user.id
    if delete_word(user_id, word):
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
